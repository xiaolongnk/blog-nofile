<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>faith技术博客</title>
  <subtitle>我们一起快乐吧...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.nofile.cc/"/>
  <updated>2016-10-09T09:54:35.000Z</updated>
  <id>https://blog.nofile.cc/</id>
  
  <author>
    <name>faith</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C/C++ 学习笔记</title>
    <link href="https://blog.nofile.cc/posts/2016/10/09/note-c.html"/>
    <id>https://blog.nofile.cc/posts/2016/10/09/note-c.html</id>
    <published>2016-10-09T09:54:35.000Z</published>
    <updated>2016-10-09T09:54:35.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="C文件的编译过程"><a href="#C文件的编译过程" class="headerlink" title="C文件的编译过程"></a>C文件的编译过程</h4><p>编译一个c文件，产生一个可执行文件，这个过程分为四个步骤</p>
<ol>
<li>.c 文件到 .i 文件， <code>--&gt;</code> .s 文件 <code>--&gt;</code> .o 文件 <code>--&gt;</code> 可执行文件<br>分别是预处理， 编译， 汇编， 链接</li>
</ol>
<p>预处理所做的事情。</p>
<p>gcc -o helloworld.i helloworld.c -E</p>
<ol>
<li>将 include 变成真实的东西</li>
<li>宏替换。 </li>
<li>宏函数的优点。比一些函数要方便，</li>
<li>条件编译，对于程序的移植和调试，非常有用。</li>
</ol>
<h4 id="typedef-和-宏不一样的地方。"><a href="#typedef-和-宏不一样的地方。" class="headerlink" title="typedef 和 宏不一样的地方。"></a>typedef 和 宏不一样的地方。</h4><p>给自己自定义的数据类型起一个别名。自定义的数据类型使用起来非常不方便。别名之后可以比较方便。<br>typedef 是有作用域的。函数中的typedef，只能在函数中起作用。</p>
<h4 id="ifndef-用法"><a href="#ifndef-用法" class="headerlink" title="ifndef 用法"></a>ifndef 用法</h4><p>for example your .h file is named head.h and content like this.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HEAD_H_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _HEAD_H_</span></div><div class="line"></div><div class="line"><span class="keyword">this</span> is your <span class="keyword">class</span> definition area.</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>in your project, there are source file import it.<br>for example.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></div></pre></td></tr></table></figure>
<p>if you include “head.h” twice, you find you can compile your file as well.<br>but if your head.h is writte without #ifndef, #define #endif, then you must<br>will get an error to stop your working.</p>
<p>also, here the use of,</p>
<p>#ifdef</p>
<p>#else</p>
<p>#endif</p>
<p>this condition definition can save your release code size :).</p>
<p>what is different between static type and dynamic type.<br>static type: know when program is in compile process.<br>dynamic type: know only in the run process.  For pointer type.</p>
<h4 id="计算一个数的算术平方根"><a href="#计算一个数的算术平方根" class="headerlink" title="计算一个数的算术平方根"></a>计算一个数的算术平方根</h4><p>老师教过我们”牛顿迭代法快速寻找平方根”，或者这种方法可以帮助我们，具体步骤如下<br>x= x+a/x;<br>算法的原理其实不复杂，就是牛顿迭代法，用x-f(x)/f’(x)来不断的逼近f(x)=a的根。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">InvSqrt</span><span class="params">(<span class="keyword">float</span> x)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">float</span> xhalf = <span class="number">0.5f</span>*x;</div><div class="line">    <span class="keyword">int</span> i = *(<span class="keyword">int</span>*)&amp;x; <span class="comment">// get bits for floating VALUE </span></div><div class="line">    i = <span class="number">0x5f375a86</span>- (i&gt;&gt;<span class="number">1</span>); <span class="comment">// gives initial guess y0</span></div><div class="line">    x = *(<span class="keyword">float</span>*)&amp;i; <span class="comment">// convert bits BACK to float</span></div><div class="line">    x = x*(<span class="number">1.5f</span>-xhalf*x*x); <span class="comment">// Newton step, repeating increases accuracy</span></div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="C-rand-lib"><a href="#C-rand-lib" class="headerlink" title="C++ rand lib"></a>C++ rand lib</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#include &lt;stdlib&gt;</div><div class="line">srand((usigned)time(NULL));</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;C文件的编译过程&quot;&gt;&lt;a href=&quot;#C文件的编译过程&quot; class=&quot;headerlink&quot; title=&quot;C文件的编译过程&quot;&gt;&lt;/a&gt;C文件的编译过程&lt;/h4&gt;&lt;p&gt;编译一个c文件，产生一个可执行文件，这个过程分为四个步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;.c 文
    
    </summary>
    
      <category term="c++" scheme="https://blog.nofile.cc/categories/c/"/>
    
    
      <category term="c/c++" scheme="https://blog.nofile.cc/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记</title>
    <link href="https://blog.nofile.cc/posts/2016/10/09/note-read.html"/>
    <id>https://blog.nofile.cc/posts/2016/10/09/note-read.html</id>
    <published>2016-10-09T06:38:00.000Z</published>
    <updated>2016-10-09T09:54:51.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于阅读"><a href="#关于阅读" class="headerlink" title="关于阅读"></a>关于阅读</h4><p>如果我一直以没有时间为理由，不去读书，是不是会越来越蠢。</p>
<h4 id="Kindle资源"><a href="#Kindle资源" class="headerlink" title="Kindle资源"></a>Kindle资源</h4><ol>
<li>这个是一个不错的kindle资源网站。目前还比较好用。 <a href="https://www.jiumodiary.com/" target="_blank" rel="external">https://www.jiumodiary.com/</a></li>
<li>我的百度云里面也有不少书，想要的朋友可以从这里拿。<a href="https://pan.baidu.com/s/1i4TEMsH" target="_blank" rel="external">https://pan.baidu.com/s/1i4TEMsH</a> </li>
</ol>
<h4 id="读过的书"><a href="#读过的书" class="headerlink" title="读过的书"></a>读过的书</h4><ol>
<li>基督山伯爵<br> 埋下仇恨，绝境中看到希望，逃生，获得意外的财富，体面的复仇。复仇复了好久，阅尽人间繁华，而不沉溺，实在厉害。</li>
<li>鲁滨逊漂流记<br> 这个是自己打猎，落入荒岛，也是尽力生存，最后找到机会出去了，也获得了一笔意想不到的财富，过上了幸福的生活。</li>
<li>肖申克的救赎<br> 有点励志，要抓住任何可以抓住的机会，不管处境多么难，都要有梦想，做成想做的事，永远不要放弃。</li>
<li>神雕侠侣<br> 最近读完的,电视剧看了好久了，读小说感觉还是很不错的。读小说我只认人物，对杨过有不少喜欢，但感觉他并不完美，有时候也有些讨厌，不过这也算是正常的吧，哪里有完美的人，孰能无过。最讨厌的角色，感觉就是郭芙了,还有姓武的那两个小傻子。</li>
<li>明朝那些事<br> 现在想来，看得基本都完了，有一点点印象，想到这本书现在只有一个想法，历史一直在重演，只不过是换了一批人。</li>
</ol>
<p>貌似只读了这么多，可以看出来，我读书不多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;关于阅读&quot;&gt;&lt;a href=&quot;#关于阅读&quot; class=&quot;headerlink&quot; title=&quot;关于阅读&quot;&gt;&lt;/a&gt;关于阅读&lt;/h4&gt;&lt;p&gt;如果我一直以没有时间为理由，不去读书，是不是会越来越蠢。&lt;/p&gt;
&lt;h4 id=&quot;Kindle资源&quot;&gt;&lt;a href=&quot;#K
    
    </summary>
    
    
      <category term="阅读" scheme="https://blog.nofile.cc/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="感悟" scheme="https://blog.nofile.cc/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>Path Sum II</title>
    <link href="https://blog.nofile.cc/posts/2016/10/09/ag-113.html"/>
    <id>https://blog.nofile.cc/posts/2016/10/09/ag-113.html</id>
    <published>2016-10-09T04:02:00.000Z</published>
    <updated>2016-10-09T09:54:27.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Path-Sum-II"><a href="#Path-Sum-II" class="headerlink" title="Path Sum II"></a>Path Sum II</h4><p>和112类似，不过这次是要求出所有的解决方案。</p>
<p>For example:<br>Given the below binary tree and sum = 22,</p>
<pre><code>      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
</code></pre><p>return</p>
<pre><code>[
       [5,4,11,2],
       [5,8,4,5]
]
</code></pre><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>简单的DFS，本质上是遍历所有的节点，找到解决方案，然后存储。需要注意的是，python的listcopy的时候需要用到<br>deepcopy才行。可以用内部函数来简化编码。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pathSum</span><span class="params">(self, root, mSum)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :type sum: int</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        """</div><div class="line">        ltMap = []</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">travelRoot</span><span class="params">(root , currentVal , ltTmp)</span>:</span></div><div class="line">            <span class="keyword">if</span> root == <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">if</span> root.left == <span class="keyword">None</span> <span class="keyword">and</span> root.right == <span class="keyword">None</span> <span class="keyword">and</span> root.val + currentVal == mSum:</div><div class="line">                ltTmp.append(root.val)</div><div class="line">                ltMap.append(copy.deepcopy(ltTmp))</div><div class="line">                <span class="keyword">return</span></div><div class="line">            travelRoot(root.left , currentVal + root.val , ltTmp + [root.val])</div><div class="line">            travelRoot(root.right, currentVal + root.val , ltTmp + [root.val])</div><div class="line">        </div><div class="line">        travelRoot(root , <span class="number">0</span> , [])</div><div class="line">        <span class="keyword">return</span> ltMap</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">from</span> common <span class="keyword">import</span> CommonUtil</div><div class="line">    root = <span class="keyword">None</span></div><div class="line">    root = CommonUtil.generateTree(root)</div><div class="line">    CommonUtil.printTree(root , <span class="number">0</span>)</div><div class="line">    ns = Solution()</div><div class="line">    ret = ns.pathSum(root , <span class="number">17</span>)</div><div class="line">    <span class="keyword">print</span> ret</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Path-Sum-II&quot;&gt;&lt;a href=&quot;#Path-Sum-II&quot; class=&quot;headerlink&quot; title=&quot;Path Sum II&quot;&gt;&lt;/a&gt;Path Sum II&lt;/h4&gt;&lt;p&gt;和112类似，不过这次是要求出所有的解决方案。&lt;/p&gt;
&lt;p&gt;For
    
    </summary>
    
    
      <category term="leetcode" scheme="https://blog.nofile.cc/tags/leetcode/"/>
    
      <category term="tree" scheme="https://blog.nofile.cc/tags/tree/"/>
    
      <category term="dfs" scheme="https://blog.nofile.cc/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>Path Sum</title>
    <link href="https://blog.nofile.cc/posts/2016/10/09/ag-112.html"/>
    <id>https://blog.nofile.cc/posts/2016/10/09/ag-112.html</id>
    <published>2016-10-09T02:49:00.000Z</published>
    <updated>2016-10-09T09:54:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Path-Sum"><a href="#Path-Sum" class="headerlink" title="Path Sum"></a>Path Sum</h4><p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>
<p>For example:</p>
<pre><code>Given the below binary tree and sum = 22,
          5
         / \
        4   8
       /   / \
      11  13  4
     /  \      \
    7    2      1
</code></pre><p>return true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22.</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>应该就是一个简单的DFS.代码里面的common class 是为测试写的类,<a href="https://github.com/xiaolongnk/common-alglib/blob/master/leetcode/common.py" target="_blank" rel="external">实现在这里</a>。因为最终有没有只能等到叶子节点才能知道，所以说只要每个节点的2个叶子中有一个返回True，那么就存在这个方案。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="comment"># class TreeNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.left = None</span></div><div class="line"><span class="comment">#         self.right = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasPathSum</span><span class="params">(self, root, sum)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type root: TreeNode</div><div class="line">        :type sum: int</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        currentVal = <span class="number">0</span></div><div class="line">        <span class="keyword">return</span> self.travelRoot(root , currentVal , sum)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">travelRoot</span><span class="params">(self , root , currentVal , tSum)</span>:</span></div><div class="line">        <span class="keyword">if</span> root == <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> root != <span class="keyword">None</span> <span class="keyword">and</span> root.left == <span class="keyword">None</span> <span class="keyword">and</span> root.right == <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">if</span> currentVal + root.val == tSum:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">        l1 = self.travelRoot(root.left , currentVal + root.val , tSum)</div><div class="line">        l2 = self.travelRoot(root.right, currentVal + root.val , tSum)</div><div class="line">        <span class="keyword">return</span> l1 <span class="keyword">or</span> l2</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">from</span> common <span class="keyword">import</span> CommonUtil</div><div class="line">    root = <span class="keyword">None</span></div><div class="line">    root = CommonUtil.generateTree(root)</div><div class="line">    CommonUtil.printTree(root , <span class="number">0</span>)</div><div class="line">    ns = Solution()</div><div class="line">    ret = ns.hasPathSum(root , <span class="number">17</span>)</div><div class="line">    <span class="keyword">print</span> ret</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Path-Sum&quot;&gt;&lt;a href=&quot;#Path-Sum&quot; class=&quot;headerlink&quot; title=&quot;Path Sum&quot;&gt;&lt;/a&gt;Path Sum&lt;/h4&gt;&lt;p&gt;Given a binary tree and a sum, determine if th
    
    </summary>
    
    
      <category term="leetcode" scheme="https://blog.nofile.cc/tags/leetcode/"/>
    
      <category term="tree" scheme="https://blog.nofile.cc/tags/tree/"/>
    
      <category term="dfs" scheme="https://blog.nofile.cc/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>Best Time to Buy and Sell Stock</title>
    <link href="https://blog.nofile.cc/posts/2016/10/09/ag-121.html"/>
    <id>https://blog.nofile.cc/posts/2016/10/09/ag-121.html</id>
    <published>2016-10-09T02:37:00.000Z</published>
    <updated>2016-10-09T09:54:29.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Best-Time-to-Buy-and-Sell-Stock"><a href="#Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="Best Time to Buy and Sell Stock"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="external">Best Time to Buy and Sell Stock</a></h4><p>题目要求是如何购买可以获益最大,比较简单，但还是比较有意思的。两个样例如下：</p>
<pre><code>Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.
</code></pre><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>我们有两个变量，分别是<code>购买价格</code>和<code>最大获益值</code>。<br>开始的时候先购买第一天的，然后后面每一天都这样判断，如果当天的价格小于上一次购买，那么把上一次购买换成今天的价格，如果不小于的话，那么看当天的获益是不是比前面一次的获益多，如果是的话，就更新一下最大获益值。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type prices: List[int]</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> len(prices) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        bought_price = prices[<span class="number">0</span>]</div><div class="line">        max_benefit = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> prices:</div><div class="line">            cnp = i - bought_price</div><div class="line">            <span class="keyword">if</span> cnp &lt; <span class="number">0</span>:</div><div class="line">                bought_price = i</div><div class="line">            <span class="keyword">elif</span> cnp &gt; max_benefit:</div><div class="line">                max_benefit = cnp</div><div class="line">        <span class="keyword">return</span> max_benefit</div><div class="line">       </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    sol = Solution()</div><div class="line">    tst = [<span class="number">7</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>]</div><div class="line">    ans = sol.maxProfit(tst)</div><div class="line">    <span class="keyword">print</span> ans</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Best-Time-to-Buy-and-Sell-Stock&quot;&gt;&lt;a href=&quot;#Best-Time-to-Buy-and-Sell-Stock&quot; class=&quot;headerlink&quot; title=&quot;Best Time to Buy and Sell Stoc
    
    </summary>
    
    
      <category term="leetcode" scheme="https://blog.nofile.cc/tags/leetcode/"/>
    
      <category term="dynamic programming" scheme="https://blog.nofile.cc/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>前端笔记</title>
    <link href="https://blog.nofile.cc/posts/2016/09/09/note-web.html"/>
    <id>https://blog.nofile.cc/posts/2016/09/09/note-web.html</id>
    <published>2016-09-09T06:43:00.000Z</published>
    <updated>2016-10-09T09:55:01.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h4><p>margin: 的4个参数。up ,right, down , left;<br>如果只有一个参数，那么表示4个都是n px。可以是1–4个参数。</p>
<h4 id="some-input-type"><a href="#some-input-type" class="headerlink" title="some input type"></a>some input type</h4><p>radio, checkbox , button, 他们都有对应的时间，可以在里面添加对应的 函数。可以带参数的。<br>checkbox 也可以写成数组。<br>name=’chk[]’  $_REQUEST [‘chk’] 取值的方式是这样的。</p>
<h4 id="fontawesome"><a href="#fontawesome" class="headerlink" title="fontawesome"></a>fontawesome</h4><p>学习两个前端页面会使用到的js.</p>
<p><a href="https://www.woothemes.com/flexslider/" target="_blank" rel="external">https://www.woothemes.com/flexslider/</a>  这个是用来做轮播图的js。<br><a href="http://fontawesome.dashgame.com/" target="_blank" rel="external">http://fontawesome.dashgame.com/</a><br>这个是用来给页面中显示一些字体用的。还有一些常用的图标，用法也很简单，</p>
<p>####<br>304 错误. 强制不从本地设备读取内容.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"0"</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Node基础"><a href="#Node基础" class="headerlink" title="Node基础"></a>Node基础</h4><p><a href="http://npm.taobao.org/" target="_blank" rel="external">http://npm.taobao.org/</a><br>首先是npm， node package manager, 这个还相对好理解。可以用淘宝的镜像，速度会快一点。<br>换一个淘宝镜像。<br>例外是nvm，这个是node version manager。node 的版本太多了，所以也有了一个manager。<br>nvm 可以选择安装 node 的版本，也很方便。<br>nvm可以从这里下载。<br><a href="https://raw.githubusercontent.com/creationix/nvm/v0.4.0/install.sh" target="_blank" rel="external">https://raw.githubusercontent.com/creationix/nvm/v0.4.0/install.sh</a></p>
<p>在一个node的项目里，可以通过<code>cnpm install</code>来安装项目依赖。<br>这里推荐一个node的应用[hexo]<a href="https://hexo.io/" target="_blank" rel="external">https://hexo.io/</a>.我的blog就是基于这个做的。</p>
<p>在页面中中使让一段文字在一个div中垂直居中？<br><a href="http://stackoverflow.com/questions/79461/vertical-alignment-of-elements-in-a-div" target="_blank" rel="external">http://stackoverflow.com/questions/79461/vertical-alignment-of-elements-in-a-div</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;margin&quot;&gt;&lt;a href=&quot;#margin&quot; class=&quot;headerlink&quot; title=&quot;margin&quot;&gt;&lt;/a&gt;margin&lt;/h4&gt;&lt;p&gt;margin: 的4个参数。up ,right, down , left;&lt;br&gt;如果只有一个参数，那么表示
    
    </summary>
    
    
      <category term="html" scheme="https://blog.nofile.cc/tags/html/"/>
    
      <category term="css" scheme="https://blog.nofile.cc/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu学习笔记</title>
    <link href="https://blog.nofile.cc/posts/2016/09/09/note-ubuntu.html"/>
    <id>https://blog.nofile.cc/posts/2016/09/09/note-ubuntu.html</id>
    <published>2016-09-09T06:42:00.000Z</published>
    <updated>2016-10-09T09:54:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="制作-ubuntu-镜像"><a href="#制作-ubuntu-镜像" class="headerlink" title="制作 ubuntu 镜像"></a>制作 ubuntu 镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo dd if=/home/your.iso of=/dev/sdb</div></pre></td></tr></table></figure>
<p>安装 fcitx 搜狗输入法。</p>
<ol>
<li>确保你的语言包是全的。</li>
<li>安装这个语言包。<a href="http://pinyin.sogou.com/linux/" target="_blank" rel="external">http://pinyin.sogou.com/linux/</a></li>
<li>按照这个做 <a href="http://jingyan.baidu.com/article/adc815134f4b92f722bf7350.html" target="_blank" rel="external">http://jingyan.baidu.com/article/adc815134f4b92f722bf7350.html</a></li>
</ol>
<p>安装firefox 插件<br>json, vimperator, firebug.</p>
<p>安装 nginx ， php ， mysql ， php-redis 扩展。<br>nginx <a href="http://nginx.org/en/download.html" target="_blank" rel="external">http://nginx.org/en/download.html</a><br>php <a href="http://php.net/get/php-5.6.15.tar.gz/from/a/mirror" target="_blank" rel="external">http://php.net/get/php-5.6.15.tar.gz/from/a/mirror</a></p>
<p>php 编译参数.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get install libcurl4-openssl-dev</div><div class="line">sudo apt-get install libssl-dev</div><div class="line">sudo apt-get install libxml2-dev</div><div class="line"></div><div class="line">./configure --prefix=/home/faith/blackh/server/php --with-config-file-path=/home/faith/blackh/server/php/etc --with-mysql=/usr/ --with-iconv-dir=/usr/ --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath  --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --enable-mbregex --enable-fpm --enable-mbstring --with-mcrypt --with-gd --enable-gd-native-ttf --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --without-pear --with-zlib --enable-pdo --with-pdo-mysql --with-mysql=shared,mysqlnd</div></pre></td></tr></table></figure>
<p>安装php-redis 扩展。<a href="http://pecl.php.net/package/redis" target="_blank" rel="external">http://pecl.php.net/package/redis</a><br>php nginx 配置,这些也很重要。</p>
<h4 id="tmux-vim-slowstart"><a href="#tmux-vim-slowstart" class="headerlink" title="tmux vim slowstart"></a>tmux vim slowstart</h4><p>tmux 中vim slow start 的原因,就是因为开了多个tmux,启动速度就变慢了.<br>查看了slowlog,发现是因为xsmp消耗了大概1s的时间.只要保证一个tmux运行就可以了.</p>
<p>grub customer<br>sudo add-apt-repository ppa:danielrichter2007/grub-customizer<br>sudo apt-get install grub-customizer</p>
<p>让你的ubuntu文件夹变成彩色的.<br>可以添加下面的ppa,添加这个<br>sudo add-apt-repository ppa:costales/folder-color<br>然后安装下面这个 folder-color 就可以了.<br>sudo apt-get install folder-color</p>
<h4 id="ubuntu安装更新版本的软件"><a href="#ubuntu安装更新版本的软件" class="headerlink" title="ubuntu安装更新版本的软件"></a>ubuntu安装更新版本的软件</h4><p>在linux中,我想升级gedit,比如说我的是 ubuntu14.04, 但是在 ubuntu15.10 里面,gedit 的版本是比<br>我的新的.但是在14.04里面我确用不了最新的gedit .<br>这个时候,我可以从官网下载最新的gedit ,安装,然而安装的时候会出现一些问题.这时候怎么办呢.可以这样.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get build-deb gedit</div><div class="line">sudo apt-get build-deb libreoffice5.0</div></pre></td></tr></table></figure>
<p>然后执行安装命令就可以了.安装应该不会出错了.<br>下面解释一下这个命令究竟是做什么的.</p>
<h4 id="ubuntu-get-source-code"><a href="#ubuntu-get-source-code" class="headerlink" title="ubuntu get source code"></a>ubuntu get source code</h4><p>如何获取ubuntu的源码<br>你可以获取任何一个你所使用的源码包.这就是开源的系统.<br>只要你的系统的源里有dep-src 这个选项,那么就可以随便获得系统源码.<br>就像下面这样.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">deb-src http://archive.canonical.com/ubuntu trusty partner</div><div class="line">deb-src http://cn.archive.ubuntu.com/ubuntu/ trusty main restricted</div><div class="line">deb-src http://cn.archive.ubuntu.com/ubuntu/ trusty multiverse</div><div class="line">deb-src http://cn.archive.ubuntu.com/ubuntu/ trusty universe</div><div class="line">deb-src http://cn.archive.ubuntu.com/ubuntu/ trusty-backports main restricted universe multiverse</div><div class="line">deb-src http://cn.archive.ubuntu.com/ubuntu/ trusty-updates main restricted</div><div class="line">deb-src http://cn.archive.ubuntu.com/ubuntu/ trusty-updates multiverse</div><div class="line">deb-src http://cn.archive.ubuntu.com/ubuntu/ trusty-updates universe</div><div class="line">deb-src http://extras.ubuntu.com/ubuntu trusty main</div><div class="line">deb-src http://security.ubuntu.com/ubuntu trusty-security main restricted</div><div class="line">deb-src http://security.ubuntu.com/ubuntu trusty-security multiverse</div><div class="line">deb-src http://security.ubuntu.com/ubuntu trusty-security universe</div><div class="line"></div><div class="line">使用下面的命令.</div><div class="line"></div><div class="line">sudo apt-cache showsrc gedit <span class="comment">#showsrc 可以用来查询有没有你需要的源码包</span></div><div class="line">sudo apt-cache <span class="built_in">source</span> gedit  <span class="comment">#source 命令用来获取你需要的源码包</span></div></pre></td></tr></table></figure>
<h4 id="ubuntu自己编译出deb"><a href="#ubuntu自己编译出deb" class="headerlink" title="ubuntu自己编译出deb"></a>ubuntu自己编译出deb</h4><p>当然在这些工作之前,我们需要确保安装一些基本的工具.<br>dpkg-dev 先安装这个.</p>
<p>在编译源码包之前,需要安装具有依赖关系的软件包,可以使用这个命令,就是上面的那个.<br>build-dep 命令.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get build-dep xxx</div><div class="line">#通过上面两个命令,就可以得到自己的源码包了.然后利用</div><div class="line">cd yoursrc</div><div class="line">sudo dpkg-buildpackage</div></pre></td></tr></table></figure>
<p>这样就可以得到你的dep文件了.<br>可以使用下面的命令来安装deb文件.<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo dpkg -i *.deb</div></pre></td></tr></table></figure></p>
<p>有了上面的知识,你就可以利用自己的系统,学习各种工具的源码了,包括vim , emacs.<br>加油吧.^_^</p>
<h4 id="关于ubuntu-的dash-残留应用的问题"><a href="#关于ubuntu-的dash-残留应用的问题" class="headerlink" title="关于ubuntu 的dash 残留应用的问题"></a>关于ubuntu 的dash 残留应用的问题</h4><p>在你的本地文件里面. .local/share/applications/ 里面把对应的删除,重新登陆就可以<br>看到你讨厌的那个东西不见了.<br>下面是我的 ubuntu dash 中的eclipse的快捷方式.可以很明显的看到是我的路径出了问题. 我需要修改一下路径就可以了.</p>
<h4 id="ubuntu-安装中文字体"><a href="#ubuntu-安装中文字体" class="headerlink" title="ubuntu 安装中文字体"></a>ubuntu 安装中文字体</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get install mysql-workbench</div><div class="line"></div><div class="line">sudo apt-get install ttf-wqy-microhei  </div><div class="line">sudo apt-get install ttf-wqy-zenhei  </div><div class="line"></div><div class="line">nmap 具体的参数还需要进一步阅读手册。</div><div class="line"></div><div class="line">nmap -PS 192.168.0.102  #扫描一个主机所有开启的端口。</div><div class="line">nmap -sP 192.168.0.*  #扫描一个网段下的所有活动的主机。</div></pre></td></tr></table></figure>
<h4 id="Ubuntu-create-launcher"><a href="#Ubuntu-create-launcher" class="headerlink" title="Ubuntu create launcher"></a>Ubuntu create launcher</h4><p>ubuntu launcher.  alacarte<br>ubuntu 创建快捷方式．用这个软件．<br>在mate桌面上安装创建自己的启动方式．要给我的zendstudio 创建．<br>sudo apt-get install gnome-panel</p>
<p>linux rm hidden files<br>rm -rf <em> 是不会删除隐藏文件的.<br>rm -rf .</em><br>这个命令会过滤调. .. ,这两个目录是无法删除的.</p>
<h4 id="Ubuntu-关闭-crash-report"><a href="#Ubuntu-关闭-crash-report" class="headerlink" title="Ubuntu 关闭 crash report"></a>Ubuntu 关闭 crash report</h4><p>ubuntu 关闭没用的 crash report。<br>sudo vim /etc/default/apport</p>
<h4 id="Ubuntu-N卡驱动"><a href="#Ubuntu-N卡驱动" class="headerlink" title="Ubuntu N卡驱动"></a>Ubuntu N卡驱动</h4><p>对硬件的了解是我的最大的弱点。<br>电脑的什么显卡驱动啊，什么网卡驱动，我都没有搞清楚。</p>
<p>I installed latest nvidia drivers by this method:</p>
<p>幸好是可以上网，如果不能上网，我真是有点没招了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">glxinfo | head</div><div class="line">http://askubuntu.com/questions/319671/how-to-change-the-graphics-card-driver-via-terminal</div><div class="line">ubuntu-drivers devices</div><div class="line">to get a list of your devices and identify the one you want. My output looked like this:</div><div class="line"></div><div class="line">ubuntu-drivers devices</div><div class="line">== /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 ==</div><div class="line">modalias : pci:v000010DEd00000391sv00001462sd00000630bc03sc00i00</div><div class="line">vendor : NVIDIA Corporation</div><div class="line">model : G73 [GeForce 7600 GT]</div><div class="line">driver : nvidia-304 - distro non-free recommended</div><div class="line">driver : nvidia-173 - distro non-free</div><div class="line">driver : xserver-xorg-video-nouveau - distro free builtin</div><div class="line">driver : nvidia-304-updates - distro non-free</div><div class="line">I wanted nvidia-304 so I typed:</div><div class="line"></div><div class="line">apt-get install nvidia-304</div></pre></td></tr></table></figure></p>
<p>Then I rebooted and confirmed using the desktop appliaction Additional Drivers that I was indeed using the driver I had chosen.</p>
<p>我遇到的最本质的问题是，我不会在命令行下安装显卡驱动，切换显卡驱动。所以导致各种问题。<br>上面的命令正好是教会这个。</p>
<h4 id="ubuntu重启gui"><a href="#ubuntu重启gui" class="headerlink" title="ubuntu重启gui"></a>ubuntu重启gui</h4><p>执行完上面的安装命令，然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">startx sudo service start lightdm</div></pre></td></tr></table></figure>
<p>就可以启动了图形界面了，回到原来的样子。</p>
<h4 id="ag"><a href="#ag" class="headerlink" title="ag"></a>ag</h4><p>like ack but faster.</p>
<p>lspci </p>
<p>glxinfo | head  如果显卡驱动有问题，这个命令会不正常。<br>正常的话，会列出来一些相关的东西。</p>
<p>modinfo<br>系统默认安装的驱动是这个。<br>xserver-xorg-video-intel<br>modprobe -r nouveau  用这个命令来卸载这个模块，从内核中卸载这个模块。</p>
<h4 id="ubuntu-enable-sudo-for-work"><a href="#ubuntu-enable-sudo-for-work" class="headerlink" title="ubuntu enable sudo for work"></a>ubuntu enable sudo for work</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># provided their password</div><div class="line"># (Note that later entries override this, so you might need to move</div><div class="line"># it further down)</div><div class="line">%sudo ALL=(ALL) ALL</div></pre></td></tr></table></figure>
<h4 id="then-add-the-sudo-group-just-like-this"><a href="#then-add-the-sudo-group-just-like-this" class="headerlink" title="then add the sudo group just like this;"></a>then add the sudo group just like this;</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">groupadd sudo</div><div class="line">sudo usermod -aG sudo work</div></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/xd502djj/archive/2011/11/23/2260094.html" target="_blank" rel="external">http://www.cnblogs.com/xd502djj/archive/2011/11/23/2260094.html</a></p>
<h4 id="ubuntu-firefox-flash"><a href="#ubuntu-firefox-flash" class="headerlink" title="ubuntu firefox flash"></a>ubuntu firefox flash</h4><p>遇到的问题是 firefox has prevented the outdated flashplugin from xxx website.<br>我从官网下载 tar.gz 之后，安装还是没有解决问题。<br>貌似要用 apt-cache 来搜索才行，现在貌似好了，问题就是这样解决的。<br>sudo apt-get install flashplugin-downloader<br>貌似真得好了。</p>
<h4 id="Linux-更新时间"><a href="#Linux-更新时间" class="headerlink" title="Linux 更新时间"></a>Linux 更新时间</h4><p>Linux 更新时间.主要的就是这个命令.<br>ntpdate cn.pool.ntp.org<br>好像 windows 时间 和 Linux 时间一定会又一个出问题.现在有点没有办法.<br>将时间写入到 cmos</p>
<p>主要是系统时间写入 硬件时间 和 硬件时间写入系统的区别.<br>sudo hwclock –systohc<br>sudo hwclock –hctosys</p>
<h4 id="允许程序没有sudo权限执行"><a href="#允许程序没有sudo权限执行" class="headerlink" title="允许程序没有sudo权限执行"></a>允许程序没有sudo权限执行</h4><p>sudo chmod +s /usr/sbin/hddtemp<br>这样就可以让 hddtemp 在没有 sudo 权限的情况下运行了。</p>
<h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><p>ok, today I learned about xargs command. this solve the problem like this.<br>rm -rf <code>ls</code><br>now you can do like this;<br>ls | xargs rm -rf</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;制作-ubuntu-镜像&quot;&gt;&lt;a href=&quot;#制作-ubuntu-镜像&quot; class=&quot;headerlink&quot; title=&quot;制作 ubuntu 镜像&quot;&gt;&lt;/a&gt;制作 ubuntu 镜像&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="linux" scheme="https://blog.nofile.cc/tags/linux/"/>
    
      <category term="ubuntu" scheme="https://blog.nofile.cc/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>sphinx学习笔记</title>
    <link href="https://blog.nofile.cc/posts/2016/09/09/note-sphinx.html"/>
    <id>https://blog.nofile.cc/posts/2016/09/09/note-sphinx.html</id>
    <published>2016-09-09T06:42:00.000Z</published>
    <updated>2016-10-09T09:54:55.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="sphinx实践"><a href="#sphinx实践" class="headerlink" title="sphinx实践"></a>sphinx实践</h4><p>用shpinx实现一个搜索相关的小项目<br>需要安装sphinx，然后和mysql配合使用。</p>
<h4 id="sphinx安装配置"><a href="#sphinx安装配置" class="headerlink" title="sphinx安装配置"></a>sphinx安装配置</h4><p>编译安装sphinx。</p>
<h4 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h4><p>需要下载一个中文字典，应该有好多现成的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;sphinx实践&quot;&gt;&lt;a href=&quot;#sphinx实践&quot; class=&quot;headerlink&quot; title=&quot;sphinx实践&quot;&gt;&lt;/a&gt;sphinx实践&lt;/h4&gt;&lt;p&gt;用shpinx实现一个搜索相关的小项目&lt;br&gt;需要安装sphinx，然后和mysql配合使用
    
    </summary>
    
    
      <category term="sphinx" scheme="https://blog.nofile.cc/tags/sphinx/"/>
    
      <category term="搜索" scheme="https://blog.nofile.cc/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>mac常用软件</title>
    <link href="https://blog.nofile.cc/posts/2016/09/09/note-software.html"/>
    <id>https://blog.nofile.cc/posts/2016/09/09/note-software.html</id>
    <published>2016-09-09T06:42:00.000Z</published>
    <updated>2016-10-09T09:54:54.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="charles-APP代理软件"><a href="#charles-APP代理软件" class="headerlink" title="charles APP代理软件"></a>charles APP代理软件</h4><p>charles 破解。我的link。 <a href="http://pan.baidu.com/s/1i4UUbOh" target="_blank" rel="external">http://pan.baidu.com/s/1i4UUbOh</a></p>
<h4 id="Dash"><a href="#Dash" class="headerlink" title="Dash"></a>Dash</h4><p>非常便捷的API手册，方便查询。</p>
<h4 id="PhpStorm"><a href="#PhpStorm" class="headerlink" title="PhpStorm"></a>PhpStorm</h4><p>PHP 开发的好帮手，可以帮你避免一些低级错误。</p>
<h4 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h4><p>和Phpstorm是同一个公司开发的，使用上和PhpStorm 差不多,用于偏前端的开发<br>工作场景。</p>
<h4 id="ipython"><a href="#ipython" class="headerlink" title="ipython"></a>ipython</h4><p>Python 命令行工具，和Python不同的是，这个可以进行命令提示，方便初学者。</p>
<h4 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h4><p>管理接口，方便重用，经常和一堆接口打交道的话，这个会很方便。</p>
<pre><code>以上貌似除了postman，其他的都是付费的。不过买起来确实很贵，但破解都
相对容易，需要的话，请自行百度，都很简单。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;charles-APP代理软件&quot;&gt;&lt;a href=&quot;#charles-APP代理软件&quot; class=&quot;headerlink&quot; title=&quot;charles APP代理软件&quot;&gt;&lt;/a&gt;charles APP代理软件&lt;/h4&gt;&lt;p&gt;charles 破解。我的link。
    
    </summary>
    
    
      <category term="开发工具" scheme="https://blog.nofile.cc/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="工程效率" scheme="https://blog.nofile.cc/tags/%E5%B7%A5%E7%A8%8B%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>shell 学习笔记</title>
    <link href="https://blog.nofile.cc/posts/2016/09/09/note-shell.html"/>
    <id>https://blog.nofile.cc/posts/2016/09/09/note-shell.html</id>
    <published>2016-09-09T06:42:00.000Z</published>
    <updated>2016-10-09T09:54:53.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><p>the follow command can be used to restart php-fpm in server.<br>ps aux | grep ‘php-fpm’ | awk ‘{print $1}’ | xargs kill -USR2<br>-F option 是用来改变默认的分隔符的。<br>awk -F ‘:’ ‘{print $3}’<br>awk 的 BEGIN 和 END 语句的功能。<br>BEGIN 是最开始的部分执行的，然后AWK开始读取文件内容，进行处理。<br>END 是最后面结束执行的.</p>
<h4 id="sed的简单例子"><a href="#sed的简单例子" class="headerlink" title="sed的简单例子"></a>sed的简单例子</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sed &apos;s/xx/ds/&apos; note</div><div class="line"></div><div class="line">[ ! -x result ] &amp;&amp; mkdir result</div><div class="line">for i in `ls *.grb`</div><div class="line">do</div><div class="line">    out=`echo $i | sed &apos;s/GLDAS_NOAH10_M.A//&apos; | sed &apos;s/\..*[[:graph:]]//&apos;`</div><div class="line">    wgrib $i &gt; result/$out&quot;.out&quot;</div><div class="line">done</div><div class="line"></div><div class="line">sed -i &quot;This command to use replace the input file&quot;</div><div class="line">just a simple example.</div><div class="line">sed -i &apos;s/--/-/&apos;</div></pre></td></tr></table></figure>
<p>d 表示是删除的意思。用新文件覆盖旧文件。<br>sed ‘/vim/d’ ~/.bashrc &gt; ~/.bashrc<br>刚才才发现原来 shell 的字符串判断相等是 = 左右两天加个空格就可以了。如果不加空格就是赋值。<br>这种语法还是有点诡异的啊。<br>并且现在很少写 if 这个东西了，自从我发现了 if 语句可以简写之后。<br>字符串操作还是又必要掌握一下的。<br>果然shell python 相比来说直截了当多了。正事因为 shell 在字符串处理上的缺陷，所以才有了sed这样<br>的工具来补充吧。<br>当然还有awk。</p>
<h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>grep -E   支持扩展的正则<br>grep -o   只输出指定内容, only-match 的含义<br>grep -F   相当于 fgrep<br>grep -v   不匹配指定正则的指令<br>grep 输出匹配内容的上下两行内容,输出上下文,记得这个参数.<br>grep -C 2 ‘linux’<br>grep -i 进行大小写无关的搜索<br>grep -P perl分格的正则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">grep -i -Po &quot;HREF=\&quot;.*?\&quot;&quot; bookmarks_4_27_15.html</div></pre></td></tr></table></figure>
<h4 id="find使用的例子"><a href="#find使用的例子" class="headerlink" title="find使用的例子"></a>find使用的例子</h4><p>下面这个script结合了find 的regex参数的用法。find regex 和 那么的区别还是挺大的。regex搜索的输出是全名的，name知识一个短的名字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># 要搜索的路径。</div><div class="line">path=&quot;$HOME&quot;</div><div class="line"></div><div class="line">for i in `find $path -regex &quot;.*/[0-9]\&#123;6\&#125;/*&quot; -type d 2&gt;/dev/null`</div><div class="line">do </div><div class="line">    echo $i</div><div class="line">    for j in `ls $i`</div><div class="line">    do</div><div class="line">        echo $j</div><div class="line">        m=`echo &quot;$j&quot; | cut -d. -f2`</div><div class="line">        if [ $m != &apos;log&apos; ]</div><div class="line">        then</div><div class="line">            echo &quot;mv for $j&quot;</div><div class="line">            mv $i&quot;/&quot;$j $i&quot;/&quot;$j&quot;.log&quot;</div><div class="line">        fi</div><div class="line">    done</div><div class="line">done</div></pre></td></tr></table></figure>
<h4 id="shell重定向"><a href="#shell重定向" class="headerlink" title="shell重定向"></a>shell重定向</h4><p>来自这个链接 <a href="http://www.cnblogs.com/yangyongzhi/p/3364939.html" target="_blank" rel="external">http://www.cnblogs.com/yangyongzhi/p/3364939.html</a></p>
<p>./Test.py 1&gt;normal 2&gt;error 3&gt;&amp;2 2&gt;&amp;1 1&gt;&amp;3<br>./Test.py 3&gt;&amp;2 2&gt;&amp;1 1&gt;&amp;3 1&gt;normal 2&gt;error  </p>
<p>可以通过这两个命令看出差别,其实就是从右向左执行的.</p>
<p>具体的执行过程是这样的,一个完整的shell指令的执行是从右往左的.<br>先执行 1&gt;&amp;3 , 然后执行 2&gt;&amp;1 , 3&gt;&amp;2</p>
<p>nohup的使用<br>在mac中，在tmux中使用nohup会有问题，会抛出下面这样的错误。所以只能在开一个终端执行。<br>nohup: can’t detach from console: Undefined error: 0<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nohup redis-server &amp; &gt;/dev/null</div></pre></td></tr></table></figure></p>
<h4 id="git-跨源合并"><a href="#git-跨源合并" class="headerlink" title="git 跨源合并"></a>git 跨源合并</h4><p>一个项目可以添加多个源,origin是默认的一个源.并且也可以跨源合并.这是比较高级的用法.<br>如果要跨项目合并. git 跨项目合并.</p>
<p>git remote add code “url”<br>git push code master</p>
<h4 id="shell-get-your-ip"><a href="#shell-get-your-ip" class="headerlink" title="shell get your ip"></a>shell get your ip</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ifconfig | grep -E -o &quot;inet ([0-9]&#123;1,3&#125;.)&#123;3&#125;([0-9]&#123;1,3&#125;)&quot; |  grep -E  -o &quot;([0-9]&#123;1,3&#125;.)&#123;3&#125;([0-9]&#123;1,3&#125;)&quot; | tail -n 1</div><div class="line">ip a| grep -E -o &quot;inet addr:([0-9]&#123;1,3&#125;.)&#123;3&#125;([0-9]&#123;1,3&#125;)&quot; |  grep -E  -o &quot;([0-9]&#123;1,3&#125;.)&#123;3&#125;([0-9]&#123;1,3&#125;)&quot; | tail -n 1</div></pre></td></tr></table></figure>
<p>linux 下 ifconfig | grep ‘inet ‘ | awk ‘{split($2, ip_cntr, “:”); print ip_cntr[2];}’</p>
<p>tmux.conf<br>想在tmux.conf中添加一些shell脚本,可以获取到我自己的IP地址.<br>这样我在连接代理的时候,就不用是自己查了.我把自己的tmux的status line 搞成了1s刷新一次.用了这个命令.</p>
<h4 id="git-push-–force"><a href="#git-push-–force" class="headerlink" title="git push –force"></a>git push –force</h4><p>git remote add.</p>
<p>将一个远端的项目添加到新的分支上,然后可以合并。<br>git remote add name git@gitlabserver.meiliworks.com:higo/api.git<br>删除这个分支。<br>git remote rm old_pandora<br>git 将某个分支强制覆盖。比如我想用newpush  的代码完全覆盖 master 的代码。<br>可以这样做。<br>git push origin newpush:master -f</p>
<p>git remote add origin url  #这样可以讲自己的git目录添加到远端仓库.很方便.<br>同一个项目可以添加多个远端仓库,可以一起使用.</p>
<h4 id="shell-functions"><a href="#shell-functions" class="headerlink" title="shell functions"></a>shell functions</h4><p>函数的返回值,函数的参数.<br><a href="http://www.jb51.net/article/33895.htm" target="_blank" rel="external">http://www.jb51.net/article/33895.htm</a><br>这里看到了一些参考,主要是这两个参数, $@ 和 $* 是一样的,可以将函数的参数当做一个字符串.<br>如果你仍然利用$1,$#,$0这些而参数,那么你可能得不到你想要的结果.<br>并且,我在shell下添加了一些常用的颜色的变量,只要. ~/.colorful 就可以使用这些变量了.<br>可以进行一些彩色的输出,是得程序更加明确.<br>其他的就是对shell更加熟悉了,大小的比较,相等的比较.还有if else elif 这样的语句,也好多了.<br>我的那个启动脚本更加明确了.</p>
<h3 id="mount-命令-fstab"><a href="#mount-命令-fstab" class="headerlink" title="mount 命令  fstab"></a>mount 命令  fstab</h3><p>Linux mount 可以讲一块磁盘挂在一个目录下.挂载之后,这个目录原来的内容就不存在了.<br>如果umount 之后,这个目录下面的空间就出现了,这一定和底层的实现有关系.操作系统究竟<br>是如何管理存储空间的,这些问题都是需要研究的.目前,所指导的可以解决这些基本问题了,<br>我可以很好的扩展我的系统空间不足的问题,但是我觉着对于</p>
<p>如果要解决这个问题,还需要一些挂载的知识,我需要讲自己的磁盘挂在系统上,让系统启动的时候自动<br>帮我挂上.而不是每次都让我自己去挂.<br>mount 里面也有很多.</p>
<p>fstab 的编写,其实还可以,就是将最前面的盘符换成具体的磁盘设备就可以了.<br>可以像下面这样,把你的磁盘随便挂上去.这就是 home分区分开使用的好处,单独挂载一个<br>磁盘之后,就具备比较好的扩展性了.只要内容没有损坏,就可以随便安装到任何一个新系统<br>上去.大部分内容都是放在/home里面的,或者可以把自己常用的软件都安装在一个指定的目录<br>下,这个目录可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">UUID=684e471c-215b-4520-b3d6-09c6e5316ee2 /               ext4    errors=remount-ro 0       1</div><div class="line"># swap was on /dev/sda6 during installation</div><div class="line">UUID=08488fed-d6f4-4fa2-b935-dd599851d98d none            swap    sw                0       0</div><div class="line">/dev/sda5                               /home             ext4    defaults,noatime  0       0</div></pre></td></tr></table></figure>
<p>刚才遇到的问题好奇怪</p>
<ol>
<li>挂在分区之后,输入密码进不来系统,我发现是我的新的home目录没有权限,把owner 改成我自己,然后就可以<br>利用图形界面进来了.</li>
<li>我进来之后,发现我的steam 用不了了,我拷贝了所有的文件,发现还是不行,再后来发现是我的home中的所有<br>的二进制文件都没有办法执行,上网找,发现是我的挂在参数有问题,用了defaults,noatime 之后就好了.真是神奇.</li>
</ol>
<p>ssh-agent<br>to start your ssh-agent, you need to eval this command.<br>eval <code>ssh-agent -s</code></p>
<p>sudo ntpdate 202.120.2.101<br>sudo ntpdate 210.72.145.44<br>这是两个时间服务器，可以调整自己的时间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">shell 执行字符串命令。可以这样。</div><div class="line">eval $cmd</div><div class="line"></div><div class="line">date &apos;+%Y-%m-%d&apos;</div><div class="line">httpd -S</div><div class="line"></div><div class="line">shell 脚本中的 空变量。可能是你的程序报错，所以写判断的时候需要考虑变量为空的情况。</div><div class="line">如果出现这样的情况，报的错误可能是这个。</div><div class="line">&quot;[: =: unary operator expected&quot;</div><div class="line"></div><div class="line">a=$(($i + 1))</div><div class="line"></div><div class="line">同时满足2各条件</div><div class="line"></div><div class="line">if test &quot;$dev&quot; = &quot;0&quot; -a &quot;$devok&quot; = &quot;0&quot; ; then</div><div class="line">	echo &quot;your comment&quot;</div><div class="line">	echo &quot;your comment&quot;</div><div class="line">exit 1</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>如何调试shell。<br>bash -x your.sh 就可以看你的shell的执行过程了。<br>或者在shell的开始部分增加一行，set -x。</p>
<h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><p>crontab l 列出当前的任务。分 时 日 月 星期  执行命令,* 表示任意的变量;<br>在linux 下，你当前用户的crontab文件存放在 /var/spool/cron/ 目录下，这个文件以你的用户身份命名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">00 23 * * * run-your script  每天23:00 执行你的脚本。其实我需要做的就是一行命令。</div><div class="line">10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart  这个任务表示每周6和周日的1:10重启服务器。注意逗号，表示多个的意思。再看下面一个。</div><div class="line">* */1 * * * /usr/local/etc/rc.d/lighttpd restart  注意这个符号/ 表示每个一个小时重启一下服务器。</div></pre></td></tr></table></figure>
<p>netstat –tunlp |grep 90</p>
<h4 id="Linux-守护进程"><a href="#Linux-守护进程" class="headerlink" title="Linux 守护进程"></a>Linux 守护进程</h4><p>set_time_limit(0); 设置程序的执行时间,如果是0说明永久执行下去.<br>学习写守护进程,用PHP实现.或这其他的也行.<br>每个进程都有一个父进程,子进程退出,父进程能得到子进程退出的状态.<br>进程组, 每个进程都属于一个进程组,这个号码等于该进程组组长的pid.</p>
<h4 id="设置VIM为shell的默认编辑器"><a href="#设置VIM为shell的默认编辑器" class="headerlink" title="设置VIM为shell的默认编辑器"></a>设置VIM为shell的默认编辑器</h4><p>export VISUAL=vim<br>export EDITOR=”$VISUAL”<br>git config –global core.editor “vim”</p>
<p>git config core.fileMode false<br>这样你的git就不会官 fileMode 的变化了，默认的模式是 true 的。</p>
<h4 id="shell中的一些基本变量"><a href="#shell中的一些基本变量" class="headerlink" title="shell中的一些基本变量"></a>shell中的一些基本变量</h4><p>函数的返回值貌似可以用 $? 变量拿到。<br>但是 return 是不支持返回非数字类型的。这是不是一个新的约束条件。<br>对于数值运算，可以实用 expr 这个工具，其实这是另一个简单的工具，可以用 man 手册来查看帮助文档。<br>shell 中有几个比较特殊的变量。<br>$0 表示当前脚本的名字<br>$1 $2 … $i  第 i 个参数<br>$# 参数的个数。<br>$?</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;awk&quot;&gt;&lt;a href=&quot;#awk&quot; class=&quot;headerlink&quot; title=&quot;awk&quot;&gt;&lt;/a&gt;awk&lt;/h4&gt;&lt;p&gt;the follow command can be used to restart php-fpm in server.&lt;br&gt;ps
    
    </summary>
    
    
      <category term="shell" scheme="https://blog.nofile.cc/tags/shell/"/>
    
      <category term="awk" scheme="https://blog.nofile.cc/tags/awk/"/>
    
      <category term="sed" scheme="https://blog.nofile.cc/tags/sed/"/>
    
      <category term="grep" scheme="https://blog.nofile.cc/tags/grep/"/>
    
  </entry>
  
  <entry>
    <title>javascript 学习笔记</title>
    <link href="https://blog.nofile.cc/posts/2016/09/09/note-js.html"/>
    <id>https://blog.nofile.cc/posts/2016/09/09/note-js.html</id>
    <published>2016-09-09T06:39:00.000Z</published>
    <updated>2016-10-09T09:54:37.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="jquery常识"><a href="#jquery常识" class="headerlink" title="jquery常识"></a>jquery常识</h4><p>如果<code>$()</code> 的括号里面是一个dom元素的话，这个东西就是一个jquery对象。<br>jquery 的方法，on ，可以绑定事件，each可以循环遍历数组。<br>同时js自己的array也是一个对象，有foreach方法。要注意和jquery的each 方法区分。<br>js 几个常用的事件<code>keyup onchange click</code></p>
<p>js 的闭包函数，这几天php中也用了不少，一个是array_walk, usort()<br>有些场景中用这些函数是很方便的，这些函数都有自己适合的场景，要在<br>合适场景使用,才能体现出这些函数的作用。</p>
<h4 id="js-正则"><a href="#js-正则" class="headerlink" title="js 正则."></a>js 正则.</h4><p>正则表达式各种语言基本都是类似的，选择任一种实现都可以。<br>^匹配开头<br>$匹配结尾<br>除了一些最基本的之外，可以简单思考下下面这些问题</p>
<p>贪婪匹配<br>跨行匹配<br>.<em> 尽可能多的匹配<br>.</em>? 匹配到一个就可以了</p>
<h4 id="js-localstorage"><a href="#js-localstorage" class="headerlink" title="js localstorage"></a>js localstorage</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">js localStorage.</div><div class="line">localStorage.getItem();</div><div class="line">localStorage.setItem();</div></pre></td></tr></table></figure>
<h4 id="underscore"><a href="#underscore" class="headerlink" title="underscore"></a>underscore</h4><p>Underscore提供了100多个函数,包括常用的: map, filter, invoke — 当然还有更多专业的辅助函数,如:函数绑定, JavaScript模板功能,创建快速索引, 强类型相等测试, 等等.</p>
<p>详细的文档可以参见这里。<a href="http://www.css88.com/doc/underscore/" target="_blank" rel="external">http://www.css88.com/doc/underscore/</a></p>
<p>####jquery on 的代理实现</p>
<p>记得有这样一个场景。<br>一个页面里面会使用到弹层，弹层上面有一些按钮，需要给这些按钮绑定事件。<br>可以使用on方法绑定。但是在js代码执行的时候，这个坦层并没有出现，页面中并没有<br>这个dom对象。这个时候，需要用到on的另一种使用方法。在他的父元素上绑定。<br>parent.on(‘click’,’selector’,function(){})<br>是一种类似这样的用法，当时这个解决了个很重要的问题。<br>jquery 中给一个元素中追加一些属性可以用append方法来实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;jquery常识&quot;&gt;&lt;a href=&quot;#jquery常识&quot; class=&quot;headerlink&quot; title=&quot;jquery常识&quot;&gt;&lt;/a&gt;jquery常识&lt;/h4&gt;&lt;p&gt;如果&lt;code&gt;$()&lt;/code&gt; 的括号里面是一个dom元素的话，这个东西就是一个jqu
    
    </summary>
    
    
      <category term="programming" scheme="https://blog.nofile.cc/tags/programming/"/>
    
      <category term="javascript" scheme="https://blog.nofile.cc/tags/javascript/"/>
    
      <category term="web" scheme="https://blog.nofile.cc/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>PHP 源码学习</title>
    <link href="https://blog.nofile.cc/posts/2016/09/09/note-php01.html"/>
    <id>https://blog.nofile.cc/posts/2016/09/09/note-php01.html</id>
    <published>2016-09-09T06:39:00.000Z</published>
    <updated>2016-10-09T09:54:47.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="PHP弱类型的实现原理"><a href="#PHP弱类型的实现原理" class="headerlink" title="PHP弱类型的实现原理"></a>PHP弱类型的实现原理</h4><p>PHP是弱类型，动态的语言脚本。在申明一个变量的时候，并不需要指明它保存的数据类型。例如：动态变量，在运行期间是可以改变的，并且在使用前无需声明变量类型。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line">$var = <span class="number">1</span>;  </div><div class="line">$var = <span class="string">"variable"</span>;  </div><div class="line">$var = <span class="number">1.00</span>;  </div><div class="line">$var = <span class="keyword">array</span>();  </div><div class="line">$var = <span class="keyword">new</span> Object();</div></pre></td></tr></table></figure>
<ol>
<li>问题一、Zend引擎是如何用C实现这种弱类型的呢？<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">Zend/zend.h</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _zval_struct zval;  </div><div class="line">   </div><div class="line"><span class="keyword">struct</span> _zval_struct &#123;  </div><div class="line">    <span class="comment">/* Variable information */</span>  </div><div class="line">    zvalue_value value;     <span class="comment">/* value */</span>  </div><div class="line">    zend_uint refcount__gc;  </div><div class="line">    zend_uchar type;    <span class="comment">/* active type */</span>  </div><div class="line">    zend_uchar is_ref__gc;  </div><div class="line">&#125;;  </div><div class="line">   </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zvalue_value &#123;  </div><div class="line">    <span class="keyword">long</span> lval;  	<span class="comment">/* long value */</span>  </div><div class="line">    <span class="keyword">double</span> dval;    <span class="comment">/* double value */</span>  </div><div class="line">    <span class="keyword">struct</span> &#123;  </div><div class="line">        <span class="keyword">char</span> *val;  </div><div class="line">        <span class="keyword">int</span> len;  </div><div class="line">    &#125; str;  </div><div class="line">    HashTable *ht;  <span class="comment">/* hash table value */</span>  </div><div class="line">    zend_object_value obj;  </div><div class="line">&#125; zvalue_value;</div><div class="line"></div><div class="line">Zend/zend_types.h：</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> zend_bool;  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> zend_uchar;  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> zend_uint;  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> zend_ulong;  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> zend_ushort;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>从上述代码中，可以看到_zvalue_value是真正保存数据的关键部分。通过共用体实现的弱类型变量声明</p>
<ol>
<li>问题二、Zend引擎是如何判别、存储PHP中的多种数据类型的呢？</li>
</ol>
<p><code>_zval_struct.type</code>中存储着一个变量的真正类型，根据type来选择如何获取zvalue_value的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_NULL     0  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_LONG     1  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_DOUBLE   2  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_BOOL     3  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_ARRAY    4  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_OBJECT   5  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_STRING   6  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_RESOURCE 7  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_CONSTANT 8  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_CONSTANT_ARRAY   9</span></div></pre></td></tr></table></figure>
<p>来看一个简单的例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line">$a = <span class="number">1</span>;  </div><div class="line"><span class="comment">//此时zval.type = IS_LONG,那么zval.value就去取lval.  </span></div><div class="line">$a = <span class="keyword">array</span>();  </div><div class="line"><span class="comment">//此时zval.type = IS_ARRAY,那么zval.value就去取ht.</span></div></pre></td></tr></table></figure>
<p>这其中最复杂的，并且在开发第三方扩展中经常需要用到的是”资源类型”.<br>在PHP中，任何不属于PHP的内建的变量类型的变量，都会被看作资源来进行保存。<br>比如：数据库句柄、打开的文件句柄、打开的socket句柄。<br>资源类型，会用lval，此时它是一个整型指示器， 然后PHP会再根据这个指示器在PHP内建的一个资源列表中查询相对应的资源。<br>正是因为ZE这样的处理方式，使PHP就实现了弱类型，而对于ZE的来说，它所面对的永远都是同一种类型zval。</p>
<p><a href="http://www.pythontab.com/html/2015/php_0513/950.html" target="_blank" rel="external">原文链接</a></p>
<ol>
<li>PHP中的排序函数有好多</li>
</ol>
<p>asort<br>usort<br>ksort<br>rsort<br>arsort<br>krsort<br>uasort<br>uksort</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;PHP弱类型的实现原理&quot;&gt;&lt;a href=&quot;#PHP弱类型的实现原理&quot; class=&quot;headerlink&quot; title=&quot;PHP弱类型的实现原理&quot;&gt;&lt;/a&gt;PHP弱类型的实现原理&lt;/h4&gt;&lt;p&gt;PHP是弱类型，动态的语言脚本。在申明一个变量的时候，并不需要指明它
    
    </summary>
    
    
      <category term="php源码" scheme="https://blog.nofile.cc/tags/php%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Linux VPN 配置</title>
    <link href="https://blog.nofile.cc/posts/2016/08/29/note-vpn.html"/>
    <id>https://blog.nofile.cc/posts/2016/08/29/note-vpn.html</id>
    <published>2016-08-29T06:43:00.000Z</published>
    <updated>2016-10-09T09:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ubuntu14-04-安装vpn"><a href="#ubuntu14-04-安装vpn" class="headerlink" title="ubuntu14.04 安装vpn"></a>ubuntu14.04 安装vpn</h4><p>这个是最正确的教程，没有之一。<br><a href="http://mad-scientist.us/juniper.html" target="_blank" rel="external">http://mad-scientist.us/juniper.html</a><br>下面是一个简单的总结</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get install libstdc++6:i386 lib32z1 lib32ncurses5 libxext6:i386 libxrender1:i386 libxtst6:i386 libxi6:i386</div><div class="line">sudo apt-get install openjdk-7-jre icedtea-7-plugin openjdk-7-jre:i386</div><div class="line">sudo apt-get install  icedtea-plugin</div><div class="line">sudo apt-get install libc6-i386 lib32nss-mdns</div><div class="line">sudo apt-get install libgtk2-perl libwww-perl</div><div class="line">wget -q -O /tmp/msjnc https://raw.github.com/madscientist/msjnc/master/msjnc</div><div class="line">chmod 755 /tmp/msjnc</div><div class="line">sudo cp /tmp/msjnc /usr/bin</div></pre></td></tr></table></figure>
<p><a href="http://www.scc.kit.edu/scc/net/juniper-vpn/linux/" target="_blank" rel="external">http://www.scc.kit.edu/scc/net/juniper-vpn/linux/</a></p>
<p>还可以参考这个帖子。需要得到realm这个东西，这个东西，去你公司的vpn网站爬一下就可以了。<br>搜索一下realm这个字，就可以看到这个内容的值。<br>最终推荐使用哪个客户端,比mac的客户端还好用。<br>不过如果没有特别的爱好，还是用mac吧,折腾起来，还是有点麻烦的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;ubuntu14-04-安装vpn&quot;&gt;&lt;a href=&quot;#ubuntu14-04-安装vpn&quot; class=&quot;headerlink&quot; title=&quot;ubuntu14.04 安装vpn&quot;&gt;&lt;/a&gt;ubuntu14.04 安装vpn&lt;/h4&gt;&lt;p&gt;这个是最正确的教程，
    
    </summary>
    
    
      <category term="vpn msjnc" scheme="https://blog.nofile.cc/tags/vpn-msjnc/"/>
    
  </entry>
  
  <entry>
    <title>vim 学习笔记</title>
    <link href="https://blog.nofile.cc/posts/2016/08/28/note-vim.html"/>
    <id>https://blog.nofile.cc/posts/2016/08/28/note-vim.html</id>
    <published>2016-08-28T06:43:00.000Z</published>
    <updated>2016-10-09T09:54:58.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="vim的几个常用的插件。"><a href="#vim的几个常用的插件。" class="headerlink" title="vim的几个常用的插件。"></a>vim的几个常用的插件。</h4><table>
<thead>
<tr>
<th>插件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ctags</td>
<td>tags 的标签</td>
</tr>
<tr>
<td>vim-ariline</td>
<td>彩色 的状态栏</td>
</tr>
<tr>
<td>nerdtree</td>
<td>一个文件管理器</td>
</tr>
<tr>
<td>gittur</td>
<td>git集成插件,可以显示修改了的内容</td>
</tr>
<tr>
<td>bundle</td>
<td>插件管理</td>
</tr>
<tr>
<td>vim-markdown</td>
<td>支持markdown的语法</td>
</tr>
</tbody>
</table>
<h4 id="VIMSCRIPT"><a href="#VIMSCRIPT" class="headerlink" title="VIMSCRIPT"></a>VIMSCRIPT</h4><p>下面是一些简单的vimscript内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vim 中定义变量要用</div><div class="line"></div><div class="line">let a=123  空格并不能影响效果，这一点和shell并不一样.</div><div class="line">echo a</div><div class="line">这样就可以看到效果。</div><div class="line"></div><div class="line">在 vimrc 中可以写简单函数，来做一些想做的事情，比如</div><div class="line">根据文件后缀，自动执行脚本程序。</div><div class="line"></div><div class="line">:echo %    这个是获得当前文件的全名，包括后缀的。</div><div class="line">:echo %&lt;   和下面的一行作用一样。</div><div class="line">:echo %:r  这个是获取当前文件的文件名，除去扩展后缀</div></pre></td></tr></table></figure>
<p>插入模式下的 vim ， ctrl + j 可以将文本内容下移一行。ctrl + m 我也不知道具体是什么，<br>我只是通过实验尝试出来的。</p>
<h4 id="VIM-启动速度慢-slowstart"><a href="#VIM-启动速度慢-slowstart" class="headerlink" title="VIM 启动速度慢 slowstart"></a>VIM 启动速度慢 slowstart</h4><p>vim –startuptime vim.log -c q<br>sudo vim 启动速度超级慢。<br>vim 启动速度变慢.在终端中可以这样启动 vim -X 这样是不需要和X挂上勾的,所以会变慢.修改了一下之后<br>瞬间感觉电脑变快了.vimariline这个插件会明显增加启动时间，加之没什么用，后面就从我的vim插件里面去掉了。</p>
<h4 id="sudo-vim-启动速度超级慢"><a href="#sudo-vim-启动速度超级慢" class="headerlink" title="sudo vim 启动速度超级慢"></a>sudo vim 启动速度超级慢</h4><p>调查之后，发现是我把系统的hosts文件删除了，touch了一个空文件。<br>后面，总是提示unresolve host 的提示。<br>在增加了我的hostname在host中之后，sudo vim 速度就快了。开来和这个也有关系。</p>
<h4 id="vim-记录上次编辑位置。"><a href="#vim-记录上次编辑位置。" class="headerlink" title="vim 记录上次编辑位置。"></a>vim 记录上次编辑位置。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">au BufReadPost * if line(&quot;&apos;\&quot;&quot;) &gt; 0|if line(&quot;&apos;\&quot;&quot;) &lt;= line(&quot;$&quot;)|exe(&quot;norm &apos;\&quot;&quot;)|else|exe &quot;norm $&quot;|endif|endif</div></pre></td></tr></table></figure>
<h4 id="vim-删除重复行"><a href="#vim-删除重复行" class="headerlink" title="vim 删除重复行"></a>vim 删除重复行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sort</div><div class="line">g/^\(.\+\)$\n\1/d</div></pre></td></tr></table></figure>
<h4 id="vim-插入当前时间"><a href="#vim-插入当前时间" class="headerlink" title="vim 插入当前时间"></a>vim 插入当前时间</h4><p>插入时间，这个应该说是很方便的，但是我并不懂这个命令是怎么实现的。<br>在vimrc中加入这个map，在normal模式下，输入,dt就可以在当前位置插入时间了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">map ,dt a&lt;C-R&gt;=strftime(&apos;%Y-%m-%d %H:%M&apos;)&lt;CR&gt;</div></pre></td></tr></table></figure>
<h4 id="vim-find"><a href="#vim-find" class="headerlink" title="vim find"></a>vim find</h4><p>天刚学到的是 find 命令，这个是用来打开文件用的，可以智能补全。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">set path=/home/yourpath</div></pre></td></tr></table></figure></p>
<h4 id="vim-导入其他文件内容"><a href="#vim-导入其他文件内容" class="headerlink" title="vim 导入其他文件内容"></a>vim 导入其他文件内容</h4><p>将当前文件的部分内容导入到其他文件<br>1,20 w&gt;&gt; /path/otherfile.txt<br>1,20 w /path/otherfile.txt<br>具体命令就是这样。</p>
<p>同样的，也可以将其他文件的内容读入到当前文件来。命令是这个<br>r: /path/file.txt</p>
<p>同时，这个命令也可以将外部程序的输出读入到当前文件中。<br>r !date<br>这样也是可以插入时间的。将这个命令用map命令映射一下，就可以得到和那个实现的同样的功能<br>了。</p>
<h4 id="VIM和系统共享剪切板"><a href="#VIM和系统共享剪切板" class="headerlink" title="VIM和系统共享剪切板"></a>VIM和系统共享剪切板</h4><p>首先需要补充的一点是，+寄存器是只有vim-gtk 或者 vim-gnome 才会有的，不要只安装了<br>vim，这是不够的啦，在安装的时候需要注意一下，不然是无法使用系统剪切板的啦。<br>复制单个字符， nyl n 是数字，l和vim的方向键一样，表示向后，就是向后复制n个字符。<br>同理，nyh 表示向前复制n个字符。这样就可以很自由的复制了。<br>复制单词 ynw 其中n是数字，表示要复制的单词的个数。<br>按行为单位复制：<br>nyy 表示复制n 行，和上面的命令差不多。应该是向下取的。<br>p 表示粘贴，注意小写，这个是代表粘贴在下面。<br>P 也表示粘贴，这次是大写啊，这个是代表粘贴在前面。<br>估计对于字符复制粘贴的内容也是同样的规则啊。<br>“+y 表示复制到系统剪切板去。这个应该忘不了吧。</p>
<p>vim 有很多的粘贴板，这些东西的用处你自己应该可以理解，一般情况下，都是只用一个粘贴板<br>的，但是粘贴板多一点也是没有坏处的啊。vim中的复制是用y来完成的，在这之前，你当然可以<br>决定你的内容是存放在那个粘贴办中，你可以用reg来查看这些粘贴板中都存了什么内容，同时<br>p是用来复制的，你也可以在复制之前决定你从哪个粘贴板中复制内容，例如”4p表示是从4好粘<br>贴板中拿东西。如果4好粘贴板中有你存下的内容的话，那么他就可以复制出来了，结合上面的<br>命令，你当然可以做成你想做的。<br>复制到第n 个粘贴板的命令: 先选择要复制的内容，然后”ny 就可以将这些内容放到粘贴板了。<br>然后在你想复制的地方”+p 就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;vim的几个常用的插件。&quot;&gt;&lt;a href=&quot;#vim的几个常用的插件。&quot; class=&quot;headerlink&quot; title=&quot;vim的几个常用的插件。&quot;&gt;&lt;/a&gt;vim的几个常用的插件。&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;插件&lt;/th&gt;

    
    </summary>
    
    
      <category term="vim" scheme="https://blog.nofile.cc/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>PHP 学习笔记</title>
    <link href="https://blog.nofile.cc/posts/2016/08/26/note-php.html"/>
    <id>https://blog.nofile.cc/posts/2016/08/26/note-php.html</id>
    <published>2016-08-26T06:41:00.000Z</published>
    <updated>2016-10-09T09:54:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="PHP-回掉函数的使用。"><a href="#PHP-回掉函数的使用。" class="headerlink" title="PHP 回掉函数的使用。"></a>PHP 回掉函数的使用。</h4><p>这是最基本的回掉方法。<br>call_user_func_array(‘your function’,array());<br>array() is your params.</p>
<p>刚才在文档里发现了好多东西，原来还是要自己编译才是最好的。才能够了解更多的特性。<br>./configure –help<br>其实已经包含了很多信息，只是你还不了解。<br>要编译安装，这个是很重要的一步。</p>
<p>编译php常见的20个错误。<br><a href="http://crybit.com/20-common-php-compilation-errors-and-fix-unix/" target="_blank" rel="external">http://crybit.com/20-common-php-compilation-errors-and-fix-unix/</a></p>
<h4 id="PHP-扩展安装-PECL"><a href="#PHP-扩展安装-PECL" class="headerlink" title="PHP 扩展安装 PECL"></a>PHP 扩展安装 PECL</h4><p>PECL is a repository for PHP Extensions, providing a directory of all known extensions<br>and hosting facilities for downloading and development of PHP extensions.<br>PECL is very important.</p>
<p>PHP 断言的使用。需要进行一些基本都的设置才可以。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line">assert_options(ASSERT_ACTIVE, <span class="number">1</span>);</div><div class="line">assert_options(ASSERT_BAIL, <span class="number">1</span>);</div><div class="line">$a = <span class="string">'i1.23'</span>;</div><div class="line">assert(is_numeric($a));</div><div class="line"><span class="keyword">echo</span> $a;</div></pre></td></tr></table></figure>
<h4 id="PHP-正则表达式"><a href="#PHP-正则表达式" class="headerlink" title="PHP 正则表达式."></a>PHP 正则表达式.</h4><p>preg_match 有几个关键词需要注意,一个是<br>界定符 # / 这个可以自己设置的.<br>preg_match 如果判断整个字符串的话,就要断言. 用 ^$.<br>可以带 result 参数，将匹配的内容都放在这个result数组中。这个数组的参数应该是应用类型的。<br>说到引用类型，我对这个还不是太清楚，没怎么使用过，应该熟悉一下。<br>类似的函数还有 preg_match_all() , 返回值表示是否匹配.<br><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">$name = <span class="string">"hello\\\\\\\\\\\\\\\\\\\\\\\\'sas"</span>;</div><div class="line">var_dump($name);</div><div class="line">$new_name = preg_replace(<span class="string">"/\\\*/"</span>,<span class="string">""</span>,$name);</div><div class="line">var_dump($name);</div><div class="line">var_dump($new_name);</div></pre></td></tr></table></figure></p>
<h4 id="PHP-urlencode-urldecode-rawurlencode-rawurldecode"><a href="#PHP-urlencode-urldecode-rawurlencode-rawurldecode" class="headerlink" title="PHP urlencode, urldecode, rawurlencode, rawurldecode"></a>PHP urlencode, urldecode, rawurlencode, rawurldecode</h4><p>他们之间的差别还是比较小的,差别就是对+号的处理,我建议使用 rawurldecode, 而不是<br>urldecode. 但这个改动不可以贸然,可能一起bug.<br>在最初的时候设计的时候,就要考虑这一点.</p>
<h4 id="curl-参数"><a href="#curl-参数" class="headerlink" title="curl 参数"></a>curl 参数</h4><p>curl 带json参数,需要加上-d 参数.没有这个参数是无法访问的.<br>curl -d {goods_id:123123} “<a href="http://sss.ss.xx" target="_blank" rel="external">http://sss.ss.xx</a>“</p>
<h4 id="PHP-array系列函数"><a href="#PHP-array系列函数" class="headerlink" title="PHP array系列函数"></a>PHP array系列函数</h4><p>下面这个函数里面包含两种用法，一种是array_walk(), 还有一种是 变量的引用。这个和c语言是很相似的。<br><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">$test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>];</div><div class="line">array_walk($test , <span class="function"><span class="keyword">function</span><span class="params">(&amp;$i)</span> </span>&#123; $i++; &#125;);</div><div class="line">var_dump($test);</div></pre></td></tr></table></figure></p>
<h5 id="PHP魔术方法"><a href="#PHP魔术方法" class="headerlink" title="PHP魔术方法"></a>PHP魔术方法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">__construct()   构造方法,生命类对象的时候就会调用.</div><div class="line">__desctruct()   析构方法,在类对象的生命周期结束之后. 这个和垃圾回收有什么关系吗.</div><div class="line">__call()        must be public method.</div><div class="line">__callStatic()  for static class method.</div><div class="line">__autoload().</div><div class="line">get_called_class()  一般是在基类中用到.基础类库中用这个方法.</div><div class="line">get_class().  得到当前类的名称.</div><div class="line"></div><div class="line">static::class   和上面的得到同样的结果.</div><div class="line">PHP_EOL. 提高代码的可移植性. 换行符. mac windows, linux 下是不一样的.</div><div class="line">user_call_func()    这个方法是写自定义函数,利用这个方法,调用的函数会变成一个变量,所以非常灵活.</div><div class="line">user_call_func_array()  和上面的额方法类似,区别在于这里的方法的参数是数组.</div><div class="line"></div><div class="line">这些东西被统称为魔术常亮.</div><div class="line">__METHOD__    return the name of the function alongwith the class name.</div><div class="line">__FUNCTION__  just return the name of the function.</div><div class="line">__CLASS__</div><div class="line">__FILE__      return filename of current file.</div><div class="line">__LINE__      return current line number.</div><div class="line">__DIR__       equal dirname(__FILE__).</div></pre></td></tr></table></figure>
<h4 id="PHP-SPL-方法-STANDARD-PHP-LIBRARY"><a href="#PHP-SPL-方法-STANDARD-PHP-LIBRARY" class="headerlink" title="PHP SPL 方法 STANDARD PHP LIBRARY"></a>PHP SPL 方法 STANDARD PHP LIBRARY</h4><p>PHP 中spl 开头的一些方法是做什么的,比如spl_autoload_register.<br>类似的方法还有不少,都是用来做什么的额.刚才调查了一下,确实有好多东西,这些都是PHP的高级语法,应该认真研究下,<br>用好了,可以写出高效的代码.  对这门语言,我的了解还是不够,还需要认真研究.PHP SPL ==&gt; standard PHP library.</p>
<h3 id="PHP-XHPROF"><a href="#PHP-XHPROF" class="headerlink" title="PHP XHPROF"></a>PHP XHPROF</h3><p>XHProf是一个分层PHP性能分析工具。它报告函数级别的请求次数和各种指标，包括阻塞时间，CPU时间和内存使用情况。一个函数的开销，可细分成调用者和被调用者的开销，XHProf数据收集阶段，它记录调用次数的追踪和包容性的指标弧在动态callgraph的一个程序。它独有的数据计算的报告/后处理阶段。在数据收集时，XHProfd通过检测循环来处理递归的函数调用，并通过给递归调用中每个深度的调用一个有用的命名来避开死循环。XHProf分析报告有助于理解被执行的代码的结构，它有一个简单的HTML的用户界面（ PHP写成的）。基于浏览器的性能分析用户界面能更容易查看，或是与同行们分享成果。也能绘制调用关系图。</p>
<h4 id="PHP-composer"><a href="#PHP-composer" class="headerlink" title="PHP composer"></a>PHP composer</h4><p><a href="http://pkg.phpcomposer.com/" target="_blank" rel="external">http://pkg.phpcomposer.com/</a></p>
<h4 id="PHP-图像操作"><a href="#PHP-图像操作" class="headerlink" title="PHP 图像操作"></a>PHP 图像操作</h4><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">session_start();</div><div class="line">header(<span class="string">"Content-type:image/png"</span>); </div><div class="line">$img_width=<span class="number">100</span>;</div><div class="line">$img_height=<span class="number">20</span>;</div><div class="line"></div><div class="line">srand(microtime()*<span class="number">100000</span>);</div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">4</span>;$i++)</div><div class="line">&#123;</div><div class="line">     $new_number.=dechex(rand(<span class="number">0</span>,<span class="number">15</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line">$_SESSION[check_auth]=$new_number;</div><div class="line">$new_number=imageCreate($img_width,$img_height);<span class="comment">//创建图象</span></div><div class="line">ImageColorAllocate($new_number,<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>);  <span class="comment">//设置背景色为白色</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($_SESSION[check_auth]);$i++)</div><div class="line">&#123;</div><div class="line">    $font=mt_rand(<span class="number">3</span>,<span class="number">5</span>);</div><div class="line">    $x=mt_rand(<span class="number">1</span>,<span class="number">8</span>) + $img_width*$i/<span class="number">4</span>;</div><div class="line">    $y=mt_rand(<span class="number">1</span>,$img_height/<span class="number">4</span>);</div><div class="line">    $color=imageColorAllocate($new_number,mt_rand(<span class="number">0</span>,<span class="number">100</span>),mt_rand(<span class="number">0</span>,<span class="number">150</span>),mt_rand(<span class="number">0</span>,<span class="number">200</span>));<span class="comment">//设置字符颜色</span></div><div class="line">    imageString($new_number,$font,$x,$y,$_SESSION[check_auth][$i],$color);<span class="comment">//输出字符</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">ImagePng($new_number);</div><div class="line">ImageDestroy($new_number);</div></pre></td></tr></table></figure>
<h4 id="PHP-echo-和-print的区别。"><a href="#PHP-echo-和-print的区别。" class="headerlink" title="PHP echo 和 print的区别。"></a>PHP echo 和 print的区别。</h4><p>主要掌握echo的下面这两个特性。print更多的是一个函数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="keyword">echo</span> <span class="string">"hello"</span>, <span class="string">"world"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOT</span></div><div class="line">test</div><div class="line">EOT;</div></pre></td></tr></table></figure>
<h4 id="PHP-session-和-cookie"><a href="#PHP-session-和-cookie" class="headerlink" title="PHP session 和 cookie"></a>PHP session 和 cookie</h4><p>PHP配置中介绍了session和cookie相关的配置。注意<code>PHPSESSID</code>这个东西,这个是通过<code>session.name = PHPSESSID</code> 来设置的。但是如果同一个server上部署了2个应用，那么两个应用的<code>session.name</code>都是相同的。不知道会不会有影响。完了我会测试一下。这个貌似不会相互影响。cookie会存放在不同的域名下面的。</p>
<h4 id="PHP-配置"><a href="#PHP-配置" class="headerlink" title="PHP 配置"></a>PHP 配置</h4><p>那天发现我本地环境速度很慢的原因是 php-fpm.conf 中的maxchildren 数量太少了。我改成static 的，然后把最大数量变成128； 一下子就不用排队了。当时的现象是这样的。我看network，显示网络请求在排队，但是我完了单独访问每一个排队排了很久的接口，速度都很快，所以很疑惑。</p>
<p>PHP memcache 扩展和 memcached扩展<br>memcache扩展比memcached扩展要早，但是功能上不如后者，memcache基本上只支持set和get。memcached可以支持更多方法。一般建议安装memcahced扩展。安装memcached扩展时需要安装libmemcached，memcache扩展则不需要。</p>
<p>PHP $_SERVER 变量<br>PHP在命令行模式下的<code>$_SERVER</code>变量中的变量可以在shell中export来设置,shell中的变量会出现在SERVER变量中。在web环境中,要通过在服务器中设置才可以。nginx在<code>fastcgi_params</code>中设置。</p>
<p>session的相关配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">session.save_handler = files</div><div class="line">session.save_path = /tmp</div><div class="line">session.use_cookies = 1</div><div class="line">session.use_only_cookies = 1</div><div class="line">session.name = PHPSESSID</div><div class="line">session.auto_start = 0</div><div class="line">session.cookie_lifetime = 0</div><div class="line">session.cookie_path = /</div><div class="line">session.cookie_domain =</div><div class="line">session.cookie_httponly =</div><div class="line">session.serialize_handler = php</div><div class="line">session.gc_probability = 1</div><div class="line">session.gc_divisor = 1000</div><div class="line">session.gc_maxlifetime = 1440</div><div class="line">session.bug_compat_42 = Off</div><div class="line">session.bug_compat_warn = Off</div><div class="line">session.referer_check =</div><div class="line">session.entropy_length = 0</div><div class="line">session.cache_limiter = nocache</div><div class="line">session.cache_expire = 180</div><div class="line"></div><div class="line">#通过url传值，而不是cookie</div><div class="line">session.use_trans_sid = 0</div><div class="line"></div><div class="line">session.hash_function = 0</div><div class="line">session.hash_bits_per_character = 5</div></pre></td></tr></table></figure>
<h4 id="PHP-开启slowlog"><a href="#PHP-开启slowlog" class="headerlink" title="PHP 开启slowlog"></a>PHP 开启slowlog</h4><h4 id="PHP-异常"><a href="#PHP-异常" class="headerlink" title="PHP 异常"></a>PHP 异常</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;PHP-回掉函数的使用。&quot;&gt;&lt;a href=&quot;#PHP-回掉函数的使用。&quot; class=&quot;headerlink&quot; title=&quot;PHP 回掉函数的使用。&quot;&gt;&lt;/a&gt;PHP 回掉函数的使用。&lt;/h4&gt;&lt;p&gt;这是最基本的回掉方法。&lt;br&gt;call_user_func_
    
    </summary>
    
    
      <category term="web" scheme="https://blog.nofile.cc/tags/web/"/>
    
      <category term="php" scheme="https://blog.nofile.cc/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>nginx 学习笔记</title>
    <link href="https://blog.nofile.cc/posts/2016/08/26/note-ng.html"/>
    <id>https://blog.nofile.cc/posts/2016/08/26/note-ng.html</id>
    <published>2016-08-26T06:41:00.000Z</published>
    <updated>2016-10-09T09:54:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nginx编译参数"><a href="#nginx编译参数" class="headerlink" title="nginx编译参数"></a>nginx编译参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">./configure \</div><div class="line">    --prefix=/home/service/nginx \</div><div class="line">    --with-http_ssl_module \</div><div class="line">    --with-http_spdy_module \</div><div class="line">    --with-http_realip_module \</div><div class="line">    --with-http_addition_module \</div><div class="line">    --with-http_xslt_module \</div><div class="line">    --with-http_image_filter_module \</div><div class="line">    --with-http_sub_module \</div><div class="line">    --with-http_dav_module \</div><div class="line">    --with-http_flv_module \</div><div class="line">    --with-http_mp4_module \</div><div class="line">    --with-http_gunzip_module \</div><div class="line">    --with-http_gzip_static_module \</div><div class="line">    --with-http_auth_request_module \</div><div class="line">    --with-http_random_index_module \</div><div class="line">    --with-http_secure_link_module \</div><div class="line">    --with-http_degradation_module \</div><div class="line">    --with-http_stub_status_module \</div><div class="line">    --with-pcre=/root/src/pcre-8.37 \</div><div class="line">    --with-zlib=/root/src/zlib-1.2.8 \</div><div class="line">    --with-openssl=/root/src/openssl-OpenSSL_1_0_2d \</div><div class="line">    --add-module=/root/src/naxsi-0.54/naxsi_src \</div><div class="line">    --add-module=/root/src/headers-more-nginx-module-0.27 \</div><div class="line">    --add-module=/root/src/echo-nginx-module-0.58 \</div><div class="line">    --add-module=/root/src/lua-nginx-module-0.9.18rc1 \</div><div class="line">    --add-module=/root/src/redis2-nginx-module-0.12</div></pre></td></tr></table></figure>
<h4 id="nginx-中加环境变量"><a href="#nginx-中加环境变量" class="headerlink" title="nginx 中加环境变量."></a>nginx 中加环境变量.</h4><p>fastcgi_params define_params hhh</p>
<h4 id="nginx-配置规则"><a href="#nginx-配置规则" class="headerlink" title="nginx 配置规则"></a>nginx 配置规则</h4><ol>
<li><p>location 写法。</p>
</li>
<li><p>log_format<br> nginx 的log_format , log 需要几下post参数。记得上次查问题，我只能定位到url，并不能定位<br> 到参数，这导致有些问题没有办法追查。</p>
</li>
</ol>
<h4 id="nginx-和php-fpm"><a href="#nginx-和php-fpm" class="headerlink" title="nginx 和php-fpm"></a>nginx 和php-fpm</h4><h4 id="nginx-启动和重启"><a href="#nginx-启动和重启" class="headerlink" title="nginx 启动和重启"></a>nginx 启动和重启</h4><p>检测配置文件的正确性，不要加载一个又明显错误的配置文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nginx -t -c /usr/nginx/conf/nginx.conf</div><div class="line">#启动  停止  或者重启 nginx 。</div><div class="line">nginx  -s reload  nginx  #重新加载配置文件</div><div class="line">pkill nginx     #停止nginx</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;nginx编译参数&quot;&gt;&lt;a href=&quot;#nginx编译参数&quot; class=&quot;headerlink&quot; title=&quot;nginx编译参数&quot;&gt;&lt;/a&gt;nginx编译参数&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
    
      <category term="nginx" scheme="https://blog.nofile.cc/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记</title>
    <link href="https://blog.nofile.cc/posts/2016/08/26/note-python.html"/>
    <id>https://blog.nofile.cc/posts/2016/08/26/note-python.html</id>
    <published>2016-08-26T06:39:00.000Z</published>
    <updated>2016-10-09T09:54:50.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python-内置函数"><a href="#Python-内置函数" class="headerlink" title="Python 内置函数"></a>Python 内置函数</h4><p><code>__call__  __getattr__</code>这两个内置函数是非常有用的,首先这两个函数是可以给类定义的.<br>只有在class中才能实现这两个函数.<code>__call__</code> 这个方法,可以让对象的实例作为一个无名函数被使用.<br>实际上是给class重定义了<code>()</code>运算符.</p>
<p>每次通过实例访问属性,都要经过 <code>__getattributge__()</code> 如果属性没有定义,还需要访问 <code>__get_attr__()</code></p>
<p><code>__getitem__, __setitem__, __delitem__</code> 这几个方法比较容易理解,就是对一个类的实例,<br>可以按照下标的方式进行访问. 无需过多解释.</p>
<p>参考资料 <a href="http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html" target="_blank" rel="external">http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html</a></p>
<p>####创建一个类的静态方法,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">@staticmethod</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">world</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"class instance method"</span></div></pre></td></tr></table></figure>
<p>####静态方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">@classmethod</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(cls)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'class name is'</span>,cls.__name__</div><div class="line"><span class="function"><span class="keyword">def</span></span></div></pre></td></tr></table></figure>
<h4 id="python-REGULAR-EXPRESSIOn"><a href="#python-REGULAR-EXPRESSIOn" class="headerlink" title="python REGULAR EXPRESSIOn"></a>python REGULAR EXPRESSIOn</h4><p>正则中的正向引用的问题，其实还是有一定的问题的。<br>我发现下面的引用并不能成功,不知道是为什么。所以只能放弃\1的写法，重复写前面的那个。<br>期望可以匹配出字符串中的日期。<br>这个正向引用的问题，希望以后可以有机会解决。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">regex= <span class="string">r"[\d]&#123;4&#125;(-)[\d]&#123;1,2&#125;\1[\d]&#123;1,2&#125;"</span></div><div class="line">ans = re.findall(regex , origin_str)</div><div class="line">str = [<span class="string">'nasdfasfd2015-12-31'</span> , <span class="string">'asdlasdff2015-12-11'</span>]</div><div class="line"></div><div class="line">regex= <span class="string">r"[\d]&#123;4&#125;[-|\/|\.][\d]&#123;1,2&#125;[-|\/|\.][\d]&#123;1,2&#125;"</span></div><div class="line">ans = re.findall(regex , origin_str)</div></pre></td></tr></table></figure>
<p><strong>file</strong> 你不知到的。</p>
<p>如果脚本是以相对路径被执行的，返回的是“” ， 并不会返回脚本当前目录。<br>只有脚本是以绝对路径执行的时候，才会有对应的目录，这个问题需要注意。</p>
<p>shutil 可以操作文件目录，包括复制，移动，删除。比较常用。<br>os.getcwd() 可以替代 os.path.dirname(<strong>file</strong>) ,   这种方式有时候不如前者可靠。</p>
<p>python 变量不定义之前就使用是会报错的。</p>
<p>我发现上面的说法并不一定正确,getcwd 这个东西要小心使用,应该认真阅读一下这个方法的文档.<br>它可能并不适用你的场景.在本质上,我需要的事这个东西.</p>
<h4 id="Python-获取当前脚本文件路径目录"><a href="#Python-获取当前脚本文件路径目录" class="headerlink" title="Python 获取当前脚本文件路径目录"></a>Python 获取当前脚本文件路径目录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># -*- coding: cp936 -*-</div><div class="line">import sys,os</div><div class="line">#获取脚本文件的当前路径</div><div class="line">def cur_file_dir():</div><div class="line">#获取脚本路径</div><div class="line">    path = sys.path[0]</div><div class="line">    #判断为脚本文件还是py2exe编译后的文件，如果是脚本文件，则返回的是脚本的目录，如果是py2exe编译后的文件，则返回的是编译后的文件路径</div><div class="line">    if os.path.isdir(path):</div><div class="line">        return path</div><div class="line">    elif os.path.isfile(path):</div><div class="line">        return os.path.dirname(path)</div><div class="line">        #打印结果</div><div class="line">print cur_file_dir()</div></pre></td></tr></table></figure>
<h3 id="python-excel-操作"><a href="#python-excel-操作" class="headerlink" title="python excel 操作."></a>python excel 操作.</h3><p>完成了一个python 导入到处数据的功能.用到了这两个module</p>
<p>xlwt, xlrd .  这个仅支持 xls 类型的excel. xlsx部支持.<br>首先是安装 pip . </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get install python-dev</div><div class="line">sudo apt-get install libmysqlclient-dev</div><div class="line">sudo apt-get install python-pip</div><div class="line">pip install mysql-python</div><div class="line">pip install xlwt </div><div class="line">pip install xlrd</div></pre></td></tr></table></figure>
<p>数据库操作记得 commit .<br>插入数据和写入数据的时候注意 转义.<br>python MySQLdb 也可以绑定变量,这样可以不用关心特殊字符. 类似PHP.</p>
<p>全局变量的引用,应该使用global字段.<br>python 从数据库中取出中文内容乱码.<br>unicode  需要decode成utf8 的才可以,还需要其他的设置,完了需要一一验证.</p>
<p>下面是示例代码:</p>
<p>今天想到了python的爬虫框架。刚才查了一下，发现了scrappy这个东西。后面要找时间了解一下。<br><a href="http://www.jianshu.com/p/078ad2067419" target="_blank" rel="external">http://www.jianshu.com/p/078ad2067419</a></p>
<h4 id="python2-7的字符编码问题"><a href="#python2-7的字符编码问题" class="headerlink" title="python2.7的字符编码问题"></a>python2.7的字符编码问题</h4><figure class="highlight"><table><tr><td class="code"><pre><div class="line">unicodedecodeerror: 'ascii' codec can't decode byte 0xef in position 0: ordinal not in range(128)</div><div class="line">import sys</div><div class="line">sys.reload()</div><div class="line">sys.setdefaultencoding("utf-8")</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Python-内置函数&quot;&gt;&lt;a href=&quot;#Python-内置函数&quot; class=&quot;headerlink&quot; title=&quot;Python 内置函数&quot;&gt;&lt;/a&gt;Python 内置函数&lt;/h4&gt;&lt;p&gt;&lt;code&gt;__call__  __getattr__&lt;/code&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://blog.nofile.cc/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PHP 与 FPM 的区别</title>
    <link href="https://blog.nofile.cc/posts/2016/08/25/note-phpfpm.html"/>
    <id>https://blog.nofile.cc/posts/2016/08/25/note-phpfpm.html</id>
    <published>2016-08-25T15:47:00.000Z</published>
    <updated>2016-10-09T10:05:21.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="PHP与FPM的区别"><a href="#PHP与FPM的区别" class="headerlink" title="PHP与FPM的区别"></a>PHP与FPM的区别</h4><p>nginx , fastcgi , php-fpm , php-cgi , cgi , php.ini , master process , work process , php kernel.<br>这个<a href="https://segmentfault.com/q/1010000000256516" target="_blank" rel="external">问答</a>写得很好,推荐参考。</p>
<p>首先nginx处理不了php这类的脚本程序，只能扔给php去做。<br>最早的时候，php并没有php-fpm这个东西，后面php把fpm收进了内核，编译的时候，只需要enablefpm就可以了。php-fpm是一个实现了fastcgi的程序，后来被php收了。<br>cgi 是一个协议，php-fpm 实现了这个协议。就可以和nginx通信了。cgi 的全写，common gateway interface 。为了保证web server 传递过来的参数都是标准格式的，方便cgi程序的编写，本质上是一个标准。</p>
<pre><code>web server（比如说nginx）只是内容的分发者。比如，如果请求/index.html，那么web server会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。好了，如果现在请求的是/index.php，根据配置文件，nginx知道这个不是静态文件，需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。Nginx会传哪些数据给PHP解析器呢？url要有吧，查询字符串也得有吧，POST数据也要有，HTTP header不能少吧，好的，CGI就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。仔细想想，你在PHP代码中使用的用户从哪里来的。

当web server收到/index.php这个请求后，会启动对应的CGI程序，这里就是PHP的解析器。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器。
</code></pre><p>php-cgi 是php的解释器</p>
<pre><code>大家都知道，PHP的解释器是php-cgi。php-cgi只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理（皇上，臣妾真的做不到啊！）所以就出现了一些能够调度php-cgi进程的程序，比如说由lighthttpd分离出来的spawn-fcgi。好了PHP-FPM也是这么个东东，在长时间的发展后，逐渐得到了大家的认可（要知道，前几年大家可是抱怨PHP-FPM稳定性太差的），也越来越流行。
</code></pre><p>fastcgi是cgi的改进版，cgi每次都需要解析php.ini，这样做效率很低，后面就有了fastcgi，它有一个master进程，只有master进程中会load php.ini，然后后面有请求都只会fork一个child process去处理。可以实现平滑重启。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;PHP与FPM的区别&quot;&gt;&lt;a href=&quot;#PHP与FPM的区别&quot; class=&quot;headerlink&quot; title=&quot;PHP与FPM的区别&quot;&gt;&lt;/a&gt;PHP与FPM的区别&lt;/h4&gt;&lt;p&gt;nginx , fastcgi , php-fpm , php-cgi , 
    
    </summary>
    
    
      <category term="php" scheme="https://blog.nofile.cc/tags/php/"/>
    
      <category term="php-fpm" scheme="https://blog.nofile.cc/tags/php-fpm/"/>
    
      <category term="fastcgi" scheme="https://blog.nofile.cc/tags/fastcgi/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 刷题笔记</title>
    <link href="https://blog.nofile.cc/posts/2016/08/25/note-leetcode.html"/>
    <id>https://blog.nofile.cc/posts/2016/08/25/note-leetcode.html</id>
    <published>2016-08-25T06:40:00.000Z</published>
    <updated>2016-10-09T09:54:40.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="LEETCODE-学习笔记"><a href="#LEETCODE-学习笔记" class="headerlink" title="LEETCODE 学习笔记"></a>LEETCODE 学习笔记</h4><p><a href="https://leetcode.com/" target="_blank" rel="external">https://leetcode.com/</a></p>
<p>可以按照分类做题。可以先做自己感兴趣的，easy 的 货这medium 的。hard的等最后了再做。不管怎么样的题目，对于一个搞代码的来说，做一下都是很有好处的，我觉着算法练习就好比是武侠世界中的内功，多多益善，勤于练习总是会有好处的。目前做了40个题目，做得比较少，做的题目中等的偏多一点，后面会继续做，作为业余爱好吧。不然业余时间还真没什么事做。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;LEETCODE-学习笔记&quot;&gt;&lt;a href=&quot;#LEETCODE-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;LEETCODE 学习笔记&quot;&gt;&lt;/a&gt;LEETCODE 学习笔记&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.
    
    </summary>
    
    
      <category term="leetcode" scheme="https://blog.nofile.cc/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>mysql笔记</title>
    <link href="https://blog.nofile.cc/posts/2016/08/24/note-mysql.html"/>
    <id>https://blog.nofile.cc/posts/2016/08/24/note-mysql.html</id>
    <published>2016-08-24T06:40:00.000Z</published>
    <updated>2016-10-09T09:54:42.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="mysql-性能测试工具"><a href="#mysql-性能测试工具" class="headerlink" title="mysql 性能测试工具."></a>mysql 性能测试工具.</h4><p><a href="http://www.ha97.com/5182.html" target="_blank" rel="external">Mysqlslap 自带的性能测试工具.</a></p>
<h4 id="Mysql-基本知识"><a href="#Mysql-基本知识" class="headerlink" title="Mysql 基本知识"></a>Mysql 基本知识</h4><p>一些mysql基本的操作<br><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%%datadir%'</span> //看MySql数据库物理文件存放位置</div><div class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'innodb_data%'</span>;</div><div class="line"><span class="keyword">set</span> autocommit = <span class="number">0</span></div><div class="line"><span class="keyword">lock</span> <span class="keyword">table</span> file_text write</div><div class="line"><span class="keyword">unlock</span> <span class="keyword">tables</span></div><div class="line"></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> newtable <span class="keyword">select</span> * <span class="keyword">from</span> oldtable;</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> newTable <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> oldTable;</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> newTable (col1,col2,…….) <span class="keyword">SELECT</span> col1,col2,…… <span class="keyword">FROM</span> old_table</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> myblog (<span class="keyword">id</span>,title,ctime) <span class="keyword">values</span>(<span class="number">123</span>,<span class="string">'hello'</span>,<span class="keyword">now</span>()) <span class="keyword">on</span> <span class="keyword">duplicate</span> <span class="keyword">key</span> <span class="keyword">update</span> title=<span class="keyword">values</span>(title),ctime=<span class="keyword">values</span>(ctime);</div><div class="line">//将 blog_bak 表中的所有数据导入到myblog 中，表 blog 和 blog_bak 应该有同样的表结构</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> myblog( blog,ctime) <span class="keyword">select</span> * <span class="keyword">from</span> blog_bak;</div><div class="line"></div><div class="line">if(tb2.shop_click is null, 0,tb2.shop_click) // mysql if</div><div class="line"><span class="keyword">update</span> table_a a , table_b b <span class="keyword">set</span> a.shop_status = b.group_status <span class="keyword">where</span> a.shop_id = b.shop_id; </div><div class="line">//这样可以将 table_b 的 状态同步到 table_a, 本质上和 多表查询是类似的。</div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> xxx <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">order</span> <span class="keyword">by</span> find_in_set(<span class="keyword">id</span>,<span class="string">'3,1,5'</span>) </div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> substring_index和<span class="keyword">order</span> <span class="keyword">by</span> find_in_set都可以</div><div class="line">//<span class="keyword">select</span> 按指定顺序排</div></pre></td></tr></table></figure></p>
<h4 id="Mysql-锁"><a href="#Mysql-锁" class="headerlink" title="Mysql 锁"></a>Mysql 锁</h4><p>MysIsma, Memory 支持表锁。Innodb 支持表锁和行锁,默认是行锁。 BerkelyDB 支持页锁,页锁的粒度和成本在表锁和行锁之间,不知道是什么鬼。</p>
<h5 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h5><p>乐观锁可以通过增加一个version来实现。在提交的时候，带着version作为条件去更新，如果发现version不一致了，那么就不更新，如果和当时读取到的version一直才更新数据。</p>
<p><a href="http://chenzhou123520.iteye.com/blog/1860954" target="_blank" rel="external">悲观锁的介绍</a>，用到了select for update。要实现悲观锁，必须将数据库的autocommit属性置成0<br><code>select status from t_goods where id=1 for update;</code>与普通查询不一样的是，我们使用了select…for update的方式，这样就通过数据库实现了悲观锁。此时在<code>t_goods</code>表中，id为1的那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。<code>select for update</code>，现在使用select for update来查询数据，以达到排他读的目的。但是发现，在有正常结果数据时造成的锁表对系统性能有明显地影响。select for update的条件不是主键所以id，所以造成锁表。尽可能让所有数据检索都通过索引来完成，从而避免InnoDB因为无法通过索引键加锁而升级为表级锁定。</p>
<h5 id="读锁和写锁"><a href="#读锁和写锁" class="headerlink" title="读锁和写锁"></a>读锁和写锁</h5><ol>
<li>共享锁(S锁)又称读锁,若事务T对数据对象A加上S锁,则事务T可以读A但不能修改A,其他事务只能再对A加S锁,而不能加X锁,直到T释放A上的S 锁.这保证了其他事务可以读A,但在T释放A上的S锁之前不能对A做任何修改.</li>
<li>排他锁(X锁)又称写锁.若事务T对数据对象A加上X锁,事务T可以读A也可以修改A,其他事务不能再对A加任何锁,直到T释放A上的锁.这保证了其他事务在T释放A上的锁之前不能再读取和修改A.</li>
</ol>
<h5 id="并发事务处理带来的问题"><a href="#并发事务处理带来的问题" class="headerlink" title="并发事务处理带来的问题"></a>并发事务处理带来的问题</h5><p>相对于串行处理来说，并发事务处理能大大增加数据库资源的利用率，提高数据库系统的事务吞吐量，从而可以支持更多的用户。但并发事务处理也会带来一些问题，主要包括以下几种情况。</p>
<ol>
<li>更新丢失（Lost Update）：当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题－－最后的更新覆盖了由其他事务所做的更新。例如，两个编辑人员制作了同一文档的电子副本。每个编辑人员独立地更改其副本，然后保存更改后的副本，这样就覆盖了原始文档。最后保存其更改副本的编辑人员覆盖另一个编辑人员所做的更改。如果在一个编辑人员完成并提交事务之前，另一个编辑人员不能访问同一文件，则可避免此问题。</li>
<li>脏读（Dirty Reads）：一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做”脏读”。</li>
<li>不可重复读（Non-Repeatable Reads）：一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除了！这种现象就叫做“不可重复读”。</li>
<li>幻读（Phantom Reads）：一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。</li>
</ol>
<h4 id="Mysql-索引"><a href="#Mysql-索引" class="headerlink" title="Mysql 索引"></a>Mysql 索引</h4><p>Mysql 索引</p>
<p>每次查询只能使用一个索引，所以如果在字段比较多的查询中，就算每个字段都创建了索引，也只能使用一个。但是如果创建了复合索引，这样能够走索引的内容就多了，效率会更高，所以复合索引的使用也很重要，是sql优化的一个很关键的点。</p>
<p><a href="http://tech.meituan.com/mysql-index.html" target="_blank" rel="external">http://tech.meituan.com/mysql-index.html</a><br>现在只会创建单索引,但是很多情况下,复合索引更有效. 一个表只能使用一个索引,如果单键索引和复合索引都会生效,那么mysql会选择哪个索引。mysql索引的最左选择的原则。</p>
<p><em>Mysql 优化器。</em>在有很多个索引的情况下，mysql优化器会选择一个比较好的索引。可以利用mysql索引的运算符。索引可用于<code>&lt;</code>、<code>&lt;=</code>、<code>=</code>、<code>&gt;=</code>、<code>&gt;</code> 和BETWEEN运算。在模式具有一个直接量前缀时，索引也用于 LIKE 运算。</p>
<p>有些情况下,优化的作用是很有限的,最好还是不要写太复杂的sql.  但是有一个情景,就是需要更具字表的条件去筛选结果,做分页,这种情况如何处理，可以内存排序.让排序在mysql中排序比较困难.那么这个分页逻辑如何处理. </p>
<p>Mysql join之后的索引使用情况是怎么样的，索引可以减少join语句的总共需要扫描的行数，提高join查询的效率。join的时候有个原则就是小标join大表。如果 不会选择，可以不指定join，让mysql自己去选择。order by 的字段是否有必要增加一个索引,如果有必要,是不是所有需要排序的字段都需要增加上索引?这个明显是不可取的。每个query只能利用一个索引,如果where种的字段用到了索引，并且where中的query和order by的字段不是一个，那么只能选择其中的一个索引，所以在一个quer中创建多个单键索引是没有意义的。</p>
<p>索引是在数据库表或者视图上创建的对象，目的是为了加快对表或视图的查询的速度。按照存储方式分为：聚集与非聚集索引; explain 显示mysql如何处理select语句以及连接表,可以帮助写出更好的查询语句和建立更好的索引。rows 表示mysql执行查询的行数,数值越大说明效果越不好,说明没有用好索引.<code>using where</code> :要想使查询尽可能的快, 应尽可能得找出 using filesort , using temporary 的extra的值.我觉这在业务重没有必要禁止连表查询，在不会带来什么压力的情况下，并没有什么必要。如果两个表，都比较简单，连表也没什么不可以。什么事情都应该分开来看待，没有什么是绝对的。</p>
<p>Mysql 复合索引<br>符合索引的表现效率和索引顺序是密切相关的。创建复合索引的时候要仔细考虑顺序。符合索引上是可以增加排序的，查询中的排序必须和索引中的排序一直或者相反才可以用到索引。符合索引引只有一棵树，如果是a,b,c的索引，那么先a，后b，再c，如果a相等，则按照b的顺序排，如果ab都相等，那么按照c的书序排。查找的时候，如果是a，b，c三个都能用到索引的情况，会先按照a确定出一个大概范围，然后在用b来进一步缩小范围，再用c来最后确定查找范围。但是符合索引的顺序怎么设置比较好呢，我觉着这个应该由具体的业务决定。</p>
<p>阻止复合索引使用的情况</p>
<ol>
<li>范围查找会中断符合索引。</li>
<li>使用计算函数无法使用索引。</li>
<li><code>&lt;&gt; !=</code>无法使用索引。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_example <span class="keyword">ON</span> table1 (col1 <span class="keyword">ASC</span>, col2 <span class="keyword">DESC</span>, col3 <span class="keyword">ASC</span>)</div></pre></td></tr></table></figure>
<h4 id="Mysql-翻页的方式"><a href="#Mysql-翻页的方式" class="headerlink" title="Mysql 翻页的方式"></a>Mysql 翻页的方式</h4><p>不要以为翻页只有简单的limit。limit是最简单直接的方法，但是他的缺点也很明显，对于销量数据，千级别的，用这个来翻页取数据还勉强可以，但是如果数据量更大，那么久会很慢。这个时候只能采取其他的方式来设计。所以，对于limit的方式，最好做一个限制数量的翻页，不要做成无限制的翻页。具体参见这个<a href="http://www.admin10000.com/document/5796.html" target="_blank" rel="external">mysql翻页</a></p>
<h4 id="mysql-中创建用户。"><a href="#mysql-中创建用户。" class="headerlink" title="mysql 中创建用户。"></a>mysql 中创建用户。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">CREATE USER &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;password&apos;</div><div class="line">GRANT privileges ON databasename.tablename TO &apos;username&apos;@&apos;host&apos; </div><div class="line">GRANT ALL ON *.* TO &apos;pig&apos;@&apos;%&apos;; </div><div class="line">SET PASSWORD FOR &apos;username&apos;@&apos;host&apos; = PASSWORD(&apos;newpassword&apos;);</div><div class="line">SET PASSWORD = PASSWORD(&quot;newpassword&quot;);  如果是当前登陆用户</div></pre></td></tr></table></figure>
<p>more detailed info see this link.  <a href="http://www.jb51.net/article/31850.htm" target="_blank" rel="external">http://www.jb51.net/article/31850.htm</a></p>
<h4 id="mysql-中的数据类型"><a href="#mysql-中的数据类型" class="headerlink" title="mysql 中的数据类型"></a>mysql 中的数据类型</h4><pre><code>tinyint   1 字节    -128 ~ 128
smallint  2 字节   -32768 ~ 32767
mediumint 3字节  
int       4字节  int(11)
bigint    8字节

unsigned   int   0～4294967295   
int   2147483648～2147483647 
unsigned long 0～4294967295
long   2147483648～2147483647
long long的最大值：9223372036854775807
long long的最小值：-9223372036854775808
unsigned long long的最大值：18446744073709551615

__int64的最大值：9223372036854775807
__int64的最小值：-9223372036854775808
unsigned __int64的最大值：18446744073709551615
</code></pre><h4 id="Mysql-decimal"><a href="#Mysql-decimal" class="headerlink" title="Mysql decimal"></a>Mysql decimal</h4><p>对于精度比较高的东西，比如money，我会用decimal类型，不会考虑float,double,因为他们容易产生误<br>差，numeric和decimal同义，numeric将自动转成decimal。<br>DECIMAL从MySQL 5.1引入，列的声明语法是DECIMAL(M,D)。在MySQL 5.1中，参量的取值范围如下：<br>·M是数字的最大数（精度）。其范围为1～65（在较旧的MySQL版本中，允许的范围是1～254），<br>M 的默认值是10。<br>·D是小数点右侧数字的数目（标度）。其范围是0～30，但不得超过M。<br>说明：float占4个字节，double占8个字节，decimail(M,D)占M+2个字节。</p>
<p>关于decimal范围的判断，下面这是一个不错的解释。</p>
<pre><code>Although the answers above seems correct, just a simple explanation to give you an idea of how it works.
Suppose that your column is set to be DECIMAL(13,4). This means that the column will have a total size of 13 
digits where 4 of these will be used for precision representation.
So, in summary, for that column you would have a max value of: 999999999,9999
</code></pre><p>引申 为什么floa 和 double 会丢失精度。<br>1 字节 = 8 bit。 int 一般认为是32位。最长是10位。<br>float 为4byte。<br>double 为8btye。<br>IEEE 754 标准，数的存法。</p>
<h4 id="datetime-和-timestamp-的区别。"><a href="#datetime-和-timestamp-的区别。" class="headerlink" title="datetime 和 timestamp 的区别。"></a>datetime 和 timestamp 的区别。</h4><pre><code>ctime  datetime =&gt; now()  4字节
mtime  timestamp ==&gt; CURRENT_TIMESTAMP  8字节
1970 ~ 2037
alter table user add column mtime timestamp  not null default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP;
alter table user add column ctime timestamp  not null default CURRENT_TIMESTAMP;
</code></pre><p>1970 1.1 00:00:00 标准时间，一般情况，mysql需要2个字段，一个是ctime，一个是mtime，mysql中这两个字段一般都是not null 的，timestamp如果是2个默认值都是CURRENT_TIMESTAMP的话，sql会报错，可以像上面那样写。</p>
<h4 id="Mysql-索引操作-mysqldump-数据导出和数据恢复"><a href="#Mysql-索引操作-mysqldump-数据导出和数据恢复" class="headerlink" title="Mysql 索引操作 mysqldump 数据导出和数据恢复"></a>Mysql 索引操作 mysqldump 数据导出和数据恢复</h4><figure class="highlight"><table><tr><td class="code"><pre><div class="line">create index index_name on table_name (column_list);</div><div class="line">alter table table_name add index index_name (column_list);</div><div class="line"></div><div class="line">对应的，删除索引。</div><div class="line">drop index index_name on table;</div><div class="line">alter table table_name drop index index_name;</div><div class="line">清空表中的数据，包括 auto_increment 的字段都会被重置。</div><div class="line">truncate table_name;</div><div class="line"></div><div class="line"></div><div class="line">mysqldump -h localhost -ppasswd  -uroot -d database &gt; dump.sql ;            // 只导出数据库的结构</div><div class="line">mysqldump -h localhost -ppasswd  -uroot  database  &gt; dump.sql ;             // 导出数据库的结构和所有的数据</div><div class="line">mysqldump -h localhost -ppasswd  -uroot -d database tablename &gt; dump.sql ;  // 只导出表结构</div><div class="line">mysqldump -h localhost -ppasswd  -uroot  database tablename &gt; dump.sql ;    // 导出表结构和表中的数据</div><div class="line">mysql -u root -p yourpasswd -h localhost yourdb &lt; dump.sql                  // 将dump.sql 导出入到你的数据库</div></pre></td></tr></table></figure>
<p>mysql 中的test 表的使用方法。如果你在数据表中没有数据的到处权限，但是一般的数据库中，test库中的权限你都是<br>有的，所有可以将需要的数据先导入到test中的临时表中，然后再从临时表中导出去。这样可以绕开权限控制，到处你<br>需要的数据。sql如下<br>create table xxx as select * from <code>you_target_table</code> where xxx=xxx;<br>这样 一张 test 中的临时表就创建好了，你可以用mysqldump将这个表中的数据导出去。</p>
<h4 id="mysql时间处理函数"><a href="#mysql时间处理函数" class="headerlink" title="mysql时间处理函数"></a>mysql时间处理函数</h4><figure class="highlight"><table><tr><td class="code"><pre><div class="line">select date_format(now(),"%Y-%m-%d %H:%i:%s") now;</div><div class="line">select date_sub(now(), interval 10 day) as yesterday;       // 请不要吧 day 写成 days ，month , hour 同理。</div><div class="line">group by 多个字段 从 col_a -&gt; col_b -&gt; col_c 优先级依次降低。</div><div class="line">select * from test_table where status = 1 order by col_a desc, col_b desc, col_c asc limit 100;</div><div class="line">set @a = 100;</div><div class="line">select @a:=300;  #可以通过 select 给变量赋值,这个变量只在这个链接周期中有效。</div></pre></td></tr></table></figure>
<h4 id="mysql-存储过程"><a href="#mysql-存储过程" class="headerlink" title="mysql 存储过程"></a>mysql 存储过程</h4><p>下面是一个简单的存储过程的例子。</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">delimiter $     # 因为 mysql 默认的 终止符是; 而这个正好是存储过程的语法，所以在编写存储过程之前，先将 delimiter 改成 $</div><div class="line">create procedure p()    # 创建存储过程</div><div class="line">begin</div><div class="line">select * from ttt;</div><div class="line">end;</div><div class="line">$</div><div class="line">delimiter ;     # 将 delimiter 改成默认的; 这样符合我们的习惯</div><div class="line">call p();       # 调用这个存储过程</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;mysql-性能测试工具&quot;&gt;&lt;a href=&quot;#mysql-性能测试工具&quot; class=&quot;headerlink&quot; title=&quot;mysql 性能测试工具.&quot;&gt;&lt;/a&gt;mysql 性能测试工具.&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.ha97.com
    
    </summary>
    
    
      <category term="mysql" scheme="https://blog.nofile.cc/tags/mysql/"/>
    
      <category term="存储" scheme="https://blog.nofile.cc/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
</feed>
